{"version":3,"sources":["components/Main/main.module.css","components/App/app.module.css","history.js","components/General/FormInput/index.jsx","types/user.js","reducers/auth.js","types/post.js","reducers/post.js","reducers/user.js","reducers/index.js","actions/user.js","components/Header/index.jsx","components/General/PostForm/index.jsx","actions/post.js","components/General/Post/index.jsx","components/General/Wall/index.jsx","components/Main/index.jsx","components/Register/index.jsx","components/Profile/index.jsx","components/App/index.jsx","apis/routes.js","apis/user.js","sagas/user.js","apis/post.js","sagas/post.js","sagas/index.js","configureStore.js","reportWebVitals.js","index.js","components/General/Post/post.module.css","components/Header/header.module.css","components/General/FormInput/formInput.module.css","components/General/Wall/wall.module.css","components/Register/register.module.css","components/Profile/profile.module.css","components/General/PostForm/postForm.module.css"],"names":["module","exports","history","createBrowserHistory","forwardTo","location","push","FormInput","name","label","error","type","placeholder","onChange","value","handleBlur","bigStyles","options","data-test","className","styles","formInput","big","onBlur","autoFocus","formNoValidate","map","option","defaultProps","USER_LOGED_IN","USER_LOGED_IN_SUCCEEDED","USER_LOGED_IN_FAILED","USER_LOGED_OUT","USER_REGISTERED","USER_REGISTERED_FAILED","FETCHED_USER_PROFILE","FETCHED_USER_PROFILE_SUCCEEDED","FETCHED_USER_PROFILE_FAILED","stateShape","id","undefined","token","authenticated","auth","state","action","types","payload","FETCHED_ALL_POSTS","FETCHED_ALL_POSTS_SUCCEEDED","FETCHED_ALL_POSTS_FAILED","CREATED_POST","CREATED_POST_SUCCEEDED","CREATED_POST_FAILED","FETCHED_ALL_COMMENTS","FETCHED_ALL_COMMENTS_SUCCEEDED","FETCHED_ALL_COMMENTS_FAILED","COMMENTED_POST","COMMENTED_POST_SUCCEEDED","COMMENTED_POST_FAILED","postDefaultState","loadingPosts","postErrors","nextPage","currentPage","pageSize","combineReducers","post","postTypes","clean","message","byId","content","randomId","postByIdState","commentsById","commentsOrder","date_created","createdBy","date","Date","dateCreated","getMonth","getDate","getFullYear","commentsErrors","postId","oldPost","shift","allPosts","Object","values","forEach","created_by","loadingComments","allComments","comment","comments","order","postOrderState","getPostById","genderDict","M","F","defaultUserState","profileId","email","city","gender","loading","registerErrors","password","other","user","userTypes","authReducer","postReducer","userReducer","getUserToken","fromAuthReducer","getIfAuthorized","getAuthId","getAuthName","getPostErrors","fromPostReducer","getIfNextPage","getCurrentPage","getPageSize","getPostLoading","getCommentLoading","getCommentErrorMessage","getAllPosts","getAllCommentsByPost","commentId","getCommentById","getUserInformation","getUserErrors","fromUserReducer","getUserLoading","doLoginConfirm","doLoginDecline","doLogout","registerUserDecline","fetchProfileInfoConfirm","fetchProfileInfoDecline","SignupSchema","PropTypes","bool","func","isRequired","shape","string","Yup","required","registerCamps","compose","withRouter","connect","authId","selectors","authorized","stateErrors","dispatch","doLogin","userActions","header","to","logo","src","alt","greedings","onClick","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleSubmit","login","camp","PostForm","actions","resetForm","form","disabled","formTextArea","fetchAllPosts","fetchAllPostsConfirm","fetchAllPostsDecline","createPostConfirm","createPostDecline","fetchAllCommentsConfirm","fetchAllCommentsDecline","commentPostConfirm","commentPostDecline","Post","arrayOf","number","props","showComments","this","fetchComments","setState","createComment","commentLoading","authName","enableComments","commentErrorMessage","text","footer","loadComments","bind","length","bot","Component","postActions","uuidv4","Wall","fetchPosts","posts","createPost","enabledPost","next","wall","more","Main","postLoading","fetchAllPost","main","min","max","genre","password2","userLoading","doRegister","register","validate","camps","Profile","params","fetchProfileInfo","fetchAllPostForUser","userErrors","userInformation","match","profile","information","profileImage","parseInt","word","path","component","Register","App","app","prop","View","render","URL","getProfileInfo","Promise","resolve","reject","fetch","CURRENT_URL","then","resultado","ok","json","res","response","logout","status","catch","registerUser","headers","method","body","JSON","stringify","profileFetcher","userRegister","userLogIn","LoginSaga","call","userApi","put","detail","console","log","takeLatest","limit","offset","url","keys","key","searchParams","append","getAllComments","Authorization","postFetcher","commentsFetcher","postCreator","commentCreator","select","postApi","results","mainSaga","all","fork","UserSaga","PostSaga","sagaMiddleware","createSagaMiddleware","persistConfig","storage","whitelist","configureStore","persistedReducer","persistReducer","reducer","store","createStore","applyMiddleware","persistor","persistStore","run","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","storeConfig","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4de075dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"main_main__3NTyC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__WPEG2\"};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n\nexport const forwardTo = (location) => {\n  history.push(location);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './formInput.module.css';\n\nconst FormInput = ({\n  name,\n  label,\n  error,\n  type,\n  placeholder,\n  onChange,\n  value,\n  handleBlur,\n  bigStyles,\n  options,\n}) => (\n  <div\n    data-test=\"postFormComponent\"\n    className={bigStyles ? `${styles.formInput} ${styles.big}` : styles.formInput}\n  >\n    {\n      label && (\n        <label>\n          {label}:\n          {\n            error && (\n              <span> {error}* </span>\n            )\n          }\n        </label>\n      )\n    }\n    {\n      (type === \"text\" || type === \"password\") && (\n        <input\n          onBlur={handleBlur}\n          name={name}\n          type={type}\n          onChange={onChange}\n          placeholder={placeholder}\n          value={value}\n          autoFocus={false}\n          formNoValidate\n        />\n      )\n    }\n    {\n      type === \"select\" && (\n        <select\n          onBlur={handleBlur}\n          name={name}\n          type={type}\n          onChange={onChange}\n          placeholder={placeholder}\n          value={value}\n          autoFocus={false}\n          formNoValidate\n        >\n          <option />\n          {\n            options.map((option) => (\n              <option\n                value={option.value}\n                key={option.value}\n              >{option.label}</option>\n\n            ))\n          }\n        </select>\n      )\n    }\n    \n    {\n      !label && (\n        <label>\n          {\n            error && (\n              <span> {error}* </span>\n            )\n          }\n          &nbsp;\n        </label>\n      )\n    }\n  </div>\n);\n\nFormInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  error: PropTypes.string,\n  type: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.any,\n  handleBlur: PropTypes.func,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.any ,\n    label: PropTypes.string,\n  })),\n  bigStyles: PropTypes.bool,\n};\n\nFormInput.defaultProps = {\n  type: \"text\",\n  bigStyles: false,\n  placeholder: \"\",\n};\n\nexport default FormInput;\n","export const USER_LOGED_IN = 'USER_LOGED_IN';\nexport const USER_LOGED_IN_SUCCEEDED = 'USER_LOGED_IN_SUCCEEDED';\nexport const USER_LOGED_IN_FAILED = 'USER_LOGED_IN_FAILED';\nexport const USER_LOGED_OUT = 'USER_LOGED_OUT';\nexport const USER_LOGED_OUT_SUCCEEDED = 'USER_LOGED_OUT_SUCCEEDED';\nexport const USER_LOGED_OUT_FAILED = 'USER_LOGED_OUT_FAILED';\nexport const USER_REGISTERED = 'USER_REGISTERED';\nexport const USER_REGISTERED_SUCCEEDED = 'USER_REGISTERED_SUCCEEDED';\nexport const USER_REGISTERED_FAILED = 'USER_REGISTERED_FAILED';\nexport const FETCHED_USER_PROFILE = 'FETCHED_USER_PROFILE';\nexport const FETCHED_USER_PROFILE_SUCCEEDED = 'FETCHED_USER_PROFILE_SUCCEEDED';\nexport const FETCHED_USER_PROFILE_FAILED = 'FETCHED_USER_PROFILE_FAILED';","import * as types from '../types/user';\n\nconst stateShape = {\n  id: undefined,\n  name: undefined,\n  token: undefined,\n  authenticated: false,\n};\n\nconst auth = (state = stateShape, action) => {\n  switch (action.type) {\n    case types.USER_LOGED_IN_SUCCEEDED: {\n      const {\n        payload:{\n          id,\n          name,\n          token,\n        }\n      } = action;\n      return {\n        ...state,\n        id,\n        name,\n        token,\n        authenticated: true,\n      };\n    }\n    case types.USER_LOGED_IN_FAILED:\n    case types.USER_LOGED_OUT: {\n      return stateShape;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default auth;\n\nexport const getUserToken = (state) => state.token;\nexport const getIfAuthorized = (state) => state.authenticated;\nexport const getAuthId = (state) => state.id;\nexport const getAuthName = (state) => state.name;\n","export const FETCHED_ALL_POSTS = 'FETCHED_ALL_POSTS';\nexport const FETCHED_ALL_POSTS_SUCCEEDED = 'FETCHED_ALL_POSTS_SUCCEEDED';\nexport const FETCHED_ALL_POSTS_FAILED = 'FETCHED_ALL_POSTS_FAILED';\nexport const CREATED_POST = 'CREATED_POST';\nexport const CREATED_POST_SUCCEEDED = 'CREATED_POST_SUCCEEDED';\nexport const CREATED_POST_FAILED = 'CREATED_POST_FAILED';\nexport const DELETED_POST = 'DELETED_POST';\nexport const DELETED_POST_SUCCEEDED = 'DELETED_POST_SUCCEEDED';\nexport const DELETED_POST_FAILED = 'DELETED_POST_FAILED';\nexport const FETCHED_ALL_COMMENTS = 'FETCHED_ALL_COMMENTS';\nexport const FETCHED_ALL_COMMENTS_SUCCEEDED = 'FETCHED_ALL_COMMENTS_SUCCEEDED';\nexport const FETCHED_ALL_COMMENTS_FAILED = 'FETCHED_ALL_COMMENTS_FAILED';\nexport const COMMENTED_POST = 'COMMENTED_POST';\nexport const COMMENTED_POST_SUCCEEDED = 'COMMENTED_POST_SUCCEEDED';\nexport const COMMENTED_POST_FAILED = 'COMMENTED_POST_FAILED';","import { combineReducers } from 'redux';\nimport * as postTypes from '../types/post';\n\nexport const postDefaultState = {\n  loadingPosts: false,\n  postErrors: undefined,\n  nextPage: false,\n  currentPage: -1,\n  pageSize: 3,\n};\n\nconst post = (state = postDefaultState, action) => {\n  switch(action.type) {\n    case postTypes.FETCHED_ALL_POSTS: {\n      const {\n        payload: {\n          clean\n        }\n      } = action; \n      return {\n        ...state,\n        loadingPosts: true,\n        nextPage: clean ? false : state.currentPage,\n        currentPage: clean ? -1 : state.currentPage,\n      }\n    }\n    case postTypes.FETCHED_ALL_POSTS_SUCCEEDED: {\n      const {\n        payload: {\n          nextPage,\n          currentPage,\n        },\n      } = action;\n      return {\n        ...state,\n        nextPage,\n        currentPage,\n        loadingPosts: false,\n        postErrors: undefined,\n      }\n    }\n    case postTypes.FETCHED_ALL_POSTS_FAILED: {\n      const {\n        payload: {\n          message,\n        },\n      } = action;\n      return {\n        ...state,\n        loadingPosts: false,\n        postErrors: message,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst byId = (state={}, action) => {\n  switch (action.type) {\n    case postTypes.CREATED_POST: {\n      const {\n        payload: {\n          content,\n          randomId,\n        },\n      } = action;\n      const postByIdState = {\n        ...state,\n        [randomId]: {\n          content,\n          commentsById: {},\n          commentsOrder: [],\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.CREATED_POST_SUCCEEDED: {\n      const {\n        payload: {\n          id,\n          randomId,\n          content,\n          date_created,\n          createdBy,\n        },\n      } = action;\n      const date = new Date(date_created);\n      const postByIdState = {\n        ...state,\n        [randomId]: {\n          id,\n          content,\n          dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n          createdBy,\n          commentsById: {},\n          commentsOrder: [],\n          commentsErrors: undefined,\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.CREATED_POST_FAILED: {\n      const {\n        payload: {\n          randomId,\n        },\n      } = action;\n      const postByIdState = {...state};\n      delete postByIdState[randomId];\n      return postByIdState;\n    }\n    case postTypes.COMMENTED_POST: {\n      const {\n        payload: {\n          postId,\n          content,\n          randomId,\n        } \n      } = action;\n      const oldPost = state[postId];\n      const postByIdState = {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          \n          commentsById: {\n            [randomId] : {\n              content,\n            },\n            ...oldPost.commentsById,\n          },\n          commentsOrder: [\n            randomId,\n            ...oldPost.commentsOrder,\n          ],\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.COMMENTED_POST_SUCCEEDED: {\n      const {\n        payload: {\n          postId,\n          id,\n          content,\n          createdBy,\n          dateCreated,\n          randomId,\n        } \n      } = action;\n      const oldPost = state[postId];\n      const date = new Date(dateCreated);\n      const postByIdState = {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          commentsById: {\n            ...state[postId].commentsById,\n            [randomId] : {\n              content,\n              id,\n              createdBy,\n              dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n            },\n          },\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.COMMENTED_POST_FAILED: {\n      const {\n        payload: {\n          postId,\n          randomId\n        } \n      } = action;\n      const oldPost = state[postId];\n      delete oldPost.commentsById[randomId];\n      oldPost.commentsOrder.shift();\n      const postByIdState = {\n        ...state,\n        [postId]: oldPost,\n      }\n      return postByIdState;\n    }\n    case postTypes.FETCHED_ALL_POSTS: {\n      const {\n        payload: {\n          clean\n        }\n      } = action; \n      return clean ? {} : state\n    }\n    case postTypes.FETCHED_ALL_POSTS_SUCCEEDED: {\n      const {\n        payload: {\n          allPosts,\n        },\n      } = action;\n      const postByIdState = {...state}\n      Object.values(allPosts).forEach((post) => {\n        const date = new Date(post.date_created);\n        postByIdState[post.id] = {\n          ...postByIdState[post.id],\n          content: post.content,\n          id: post.id,\n          createdBy: post.created_by,\n          dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n          commentsById: {},\n          commentsOrder: [],\n          loadingComments: false,\n          commentsErrors: undefined,\n        }\n      });\n      return postByIdState;\n    }\n    case postTypes.FETCHED_ALL_COMMENTS: {\n      const {\n        payload: {\n          postId,\n        },\n      } = action;\n      const oldPost = state[postId];\n      return {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          loadingComments: true,\n        },\n      }\n    }\n    case postTypes.FETCHED_ALL_COMMENTS_FAILED: {\n      const {\n        payload: {\n          postId,\n          message,\n        },\n      } = action;\n      const oldPost = state[postId];\n      return {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          loadingComments: false,\n          commentsErrors: message,\n        },\n      }\n    }\n    case postTypes.FETCHED_ALL_COMMENTS_SUCCEEDED: {\n      const {\n        payload: {\n          allComments,\n          postId,\n        },\n      } = action;\n      const oldPost = state[postId];\n      const commentsById = {}\n      Object.values(allComments).forEach((comment) => {\n        const date = new Date(comment.date_created);\n        commentsById[comment.id] = {\n          ...commentsById[comment.id],\n          id: comment.id,\n          content: comment.content,\n          createdBy: comment.created_by,\n          dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n        }\n      });;\n      const commentsOrder = Object.values(allComments).map((comments) => comments.id);\n      const postByIdState = {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          commentsById,\n          commentsOrder,\n          loadingComments: false,\n        }\n      }\n      return postByIdState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nconst order = (state=[], action) => {\n  switch (action.type) {\n    case postTypes.CREATED_POST: {\n      const {\n        payload: {\n          randomId,\n        },\n      } = action;\n      const postOrderState = [\n        randomId,\n        ...state\n      ]\n      return postOrderState;\n    }\n    case postTypes.CREATED_POST_FAILED: {\n      const postOrderState = [...state];\n      postOrderState.shift();\n      return postOrderState;\n    }\n    case postTypes.FETCHED_ALL_POSTS: {\n      const {\n        payload: {\n          clean\n        }\n      } = action; \n      return clean ? [] : state\n    }\n    case postTypes.FETCHED_ALL_POSTS_SUCCEEDED: {\n      const {\n        payload: {\n          allPosts,\n        },\n      } = action;\n      const postOrderState = Object.values(allPosts).map((post) => post.id);\n      return [\n        ...state,\n        ...postOrderState,\n      ];\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default combineReducers({\n  post,\n  byId,\n  order\n})\n\n//selectores\nexport const getPostErrors = (state) => state.post.postErrors;\nexport const getIfNextPage = (state) => state.post.nextPage;\nexport const getCurrentPage = (state) => state.post.currentPage;\nexport const getPageSize = (state) => state.post.pageSize;\nexport const getPostLoading = (state) => state.post.loadingPosts;\nexport const getCommentLoading = (state, postId) => getPostById(state, postId) ? getPostById(state, postId).loadingComments : undefined;\nexport const getCommentErrorMessage = (state, postId) => getPostById(state, postId) ? getPostById(state, postId).commentsErrors : undefined;\nexport const getAllPosts = (state) => state.order.map((id) => getPostById(state, id));\nexport const getPostById = (state, id) => state.byId[id] || undefined; \nexport const getCommentById = (state, postId, commentId) => state.byId[postId] ? state.byId[postId].commentsById[commentId] : undefined;\nexport const getAllCommentsByPost = (state, postId) => \n  state.byId[postId] ? (\n      state.byId[postId].commentsOrder.map((commentId) => getCommentById(state, postId, commentId))\n  ) : ( undefined );\n    \n","import * as userTypes from '../types/user';\n\nconst genderDict = {\n  M: 'Male',\n  F: 'Female',\n}\n\nexport const defaultUserState = {\n  profileId: undefined,\n  email: undefined,\n  name: undefined,\n  city: undefined,\n  gender: undefined,\n  dateCreated: undefined,\n  loading: false,\n  registerErrors: {\n    email: undefined,\n    name: undefined,\n    city: undefined,\n    gender: undefined,\n    password: undefined,\n    other: undefined,\n  },\n};\n\nconst user = (state = defaultUserState, action) => {\n  switch (action.type) {\n    case userTypes.USER_REGISTERED: {\n      return {\n        ...state,\n        loading: true,\n      }\n    }\n    case userTypes.FETCHED_USER_PROFILE_FAILED:\n    case userTypes.USER_LOGED_IN_FAILED: \n    case userTypes.USER_REGISTERED_FAILED: {\n      const {\n        payload: {\n          message\n        } \n      } = action;\n      return {\n        ...state,\n        loading: false,\n        registerErrors: message,\n      }\n    }\n    case userTypes.FETCHED_USER_PROFILE_SUCCEEDED: {\n      const {\n        payload: {\n          profileId,\n          email,\n          name,\n          city,\n          gender,\n          dateCreated,\n        }\n      } = action;\n      const date = new Date(dateCreated);\n      return {\n        profileId,\n        email,\n        name,\n        city,\n        gender: genderDict[gender],\n        loading: false,\n        dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n      }\n    }\n    default: {\n      return {\n        ...state,\n        loading: false,\n        registerErrors: defaultUserState.registerErrors,\n      }\n    }\n  }\n}\n\nexport default user;\n\n//selectores\nexport const getUserErrors = (state) => state.registerErrors;\nexport const getUserLoading = (state) => state.loading;\nexport const getUserInformation = (state) => state;\n\n","import { combineReducers } from 'redux';\nimport authReducer, * as fromAuthReducer from './auth';\nimport postReducer, * as fromPostReducer from './post';\nimport userReducer, * as fromUserReducer from './user';\n\nexport default combineReducers({\n  authReducer,\n  postReducer,\n  userReducer,\n});\n\n//auth\nexport const getUserToken = (state) => fromAuthReducer.getUserToken(state.authReducer);\nexport const getIfAuthorized = (state) => fromAuthReducer.getIfAuthorized(state.authReducer);\nexport const getAuthId = (state) => fromAuthReducer.getAuthId(state.authReducer);\nexport const getAuthName = (state) => fromAuthReducer.getAuthName(state.authReducer);\n\n//post\nexport const getPostErrors = (state) => fromPostReducer.getPostErrors(state.postReducer);\nexport const getIfNextPage = (state) => fromPostReducer.getIfNextPage(state.postReducer);\nexport const getCurrentPage = (state) => fromPostReducer.getCurrentPage(state.postReducer);\nexport const getPageSize = (state) => fromPostReducer.getPageSize(state.postReducer);\nexport const getPostLoading = (state) => fromPostReducer.getPostLoading(state.postReducer);\nexport const getCommentLoading = (state, postId) => fromPostReducer.getCommentLoading(state.postReducer, postId);\nexport const getCommentErrorMessage = (state, postId) => fromPostReducer.getCommentErrorMessage(state.postReducer, postId);\nexport const getAllPosts = (state) => fromPostReducer.getAllPosts(state.postReducer);\nexport const getAllCommentsByPost = (state, postId) => fromPostReducer.getAllCommentsByPost(state.postReducer, postId);\n\n//user\nexport const getUserInformation = (state) => fromUserReducer.getUserInformation(state.userReducer);\nexport const getUserErrors = (state) => fromUserReducer.getUserErrors(state.userReducer);\nexport const getUserLoading = (state) => fromUserReducer.getUserLoading(state.userReducer);","import * as types from '../types/user';\n\nexport const doLogin = ({\n  email,\n  password,\n}) => ({\n  type: types.USER_LOGED_IN,\n  payload: {\n    email,\n    password,\n  },\n});\n\nexport const doLoginConfirm = ({\n  id,\n  name,\n  token,\n}) => ({\n  type: types.USER_LOGED_IN_SUCCEEDED,\n  payload: {\n    id,\n    name,\n    token,\n  },\n});\n\nexport const doLoginDecline = ({\n  message,\n}) => ({\n  type: types.USER_LOGED_IN_FAILED,\n  payload: {\n    message,\n  },\n});\n\nexport const doLogout = () => ({\n  type: types.USER_LOGED_OUT,\n  payload: {\n\n  },\n});\n\nexport const doLogoutConfirm = () => ({\n  type: types.USER_LOGED_OUT_SUCCEEDED,\n  payload: {\n\n  },\n});\n\nexport const doLogoutDecline = () => ({\n  type: types.USER_LOGED_OUT_FAILED,\n  payload: {\n\n  },\n});\n\nexport const registerUser = ({\n  email,\n  name,\n  city,\n  gender,\n  password\n}) => ({\n  type: types.USER_REGISTERED,\n  payload: {\n    email,\n    name,\n    city,\n    gender,\n    password\n  },\n});\n\nexport const registerUserConfirm = ({\n  id,\n  name,\n  email,\n}) => ({\n  type: types.USER_REGISTERED_SUCCEEDED,\n  payload: {\n    id,\n    name,\n    email,\n  },\n});\n\nexport const registerUserDecline = ({\n  message,\n}) => ({\n  type: types.USER_REGISTERED_FAILED,\n  payload: {\n    message,\n  },\n});\n\nexport const fetchProfileInfo = ({\n  profileId,\n}) => ({\n  type: types.FETCHED_USER_PROFILE,\n  payload: {\n    profileId,\n  },\n});\n\nexport const fetchProfileInfoConfirm = ({\n  profileId,\n  email,\n  name,\n  city,\n  gender,\n  dateCreated,\n}) => ({\n  type: types.FETCHED_USER_PROFILE_SUCCEEDED,\n  payload: {\n    profileId,\n    email,\n    name,\n    city,\n    gender,\n    dateCreated,\n  },\n});\n\nexport const fetchProfileInfoDecline = ({\n  message,\n}) => ({\n  type: types.FETCHED_USER_PROFILE_FAILED,\n  payload: {\n    message,\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport {\n  Link,\n  withRouter\n} from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from '../General/FormInput';\nimport * as selectors from '../../reducers';\nimport * as userActions from '../../actions/user';\nimport styles from './header.module.css';\n\nexport const customPropTypes = {\n  authorized: PropTypes.bool,\n  doLogin: PropTypes.func.isRequired,\n  history: PropTypes.func.isRequired,\n  stateErrors: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }),\n  name: PropTypes.string,\n  doLogout: PropTypes.func.isRequired,\n  authId: PropTypes.string,\n}\n\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n  password: Yup.string()\n    .required('Required'),\n});\n\nconst registerCamps = [\n  {\n    name: \"Email\",\n    id: \"email\",\n    placeholder: \"email\",\n  },\n  {\n    name: \"Password\",\n    id: \"password\",\n    placeholder: \"password\",\n    type: \"password\",\n  },\n]\n\nconst Header = ({\n  authorized,\n  doLogin,\n  history,\n  stateErrors,\n  name,\n  doLogout,\n  authId,\n}) => (\n  <div className={styles.header} data-test=\"headerComponent\">\n    <Link\n      to=\"/\"\n      className={styles.logo}\n    >\n      <img src=\"assets/logo.png\" alt=\"headerLogo\"/>\n    </Link>\n    {\n      authorized ? (\n        <div\n          data-test=\"authorizedComponent\"\n          className={styles.greedings}\n        >\n          <h3>\n            Welcome back! {name}\n          </h3>\n          <button onClick={() => history.push(`/profile/${authId}`)}>Profile </button>\n          <button onClick={() => doLogout()}>Log Out </button>\n        </div>\n      ) : (\n        <Formik \n          data-test=\"unAuthorizedComponent\"\n          initialValues={{\n            email: undefined,\n            password: undefined,\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={(values) => {\n            doLogin(values);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleSubmit,\n            handleBlur,\n          }) => (\n              <div className={styles.login}>\n                <form\n                  className={styles.login}\n                  onSubmit={handleSubmit}\n                >\n                  {\n                    registerCamps.map((camp) => (\n                        <FormInput\n                          key={camp.id}\n                          handleBlur={handleBlur}\n                          name={camp.id}\n                          onChange={handleChange}\n                          error={touched[camp.id] && (errors[camp.id] || (stateErrors && stateErrors[camp.id]))}\n                          options={camp.options}\n                          placeholder={camp.name}\n                          type={camp.type}\n                          value={values[camp.id]}\n                        />\n                    ))\n                  }\n                  <button type=\"submit\">Login </button>\n                </form>\n                <button onClick={() => history.push(\"/register\")}>Register </button>\n              </div>\n            )\n          }\n        </Formik>\n      )\n    }\n  </div>\n);\n\nHeader.propTypes = customPropTypes;\n\nexport default compose(\n  withRouter,\n  connect(\n    (state) => ({\n      authId: selectors.getAuthId(state),\n      name: selectors.getAuthName(state),\n      authorized: selectors.getIfAuthorized(state),\n      stateErrors: selectors.getUserErrors(state),\n    }),\n    (dispatch) => ({\n      doLogin(values) {\n        dispatch(userActions.doLogin({\n          email: values.email,\n          password: values.password,\n        }))\n      },\n      doLogout() {\n        dispatch(userActions.doLogout())\n      }\n    }),\n  )\n)(Header)\n","import React from 'react';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport styles from './postForm.module.css';\n\nconst PostForm = ({\n  onSubmit\n}) => (\n  <Formik\n    initialValues={{\n      content: undefined,\n    }}\n    onSubmit={(values, actions) => {\n      actions.resetForm({\n        values: {\n          content: '',\n        }\n      })\n      onSubmit(values)\n    }}\n  >\n    {({\n      values,\n      handleChange,\n      handleSubmit\n    }) => (\n      <form className={styles.form} onSubmit={handleSubmit}>\n        <button type=\"submit\" disabled={!values.content || values.content === ''}>Comment</button>\n        <textarea\n          id=\"content\"\n          name=\"content\"\n          placeholder=\"Write Something...\"\n          onChange={handleChange}\n          value={values.content}\n          autoFocus={false}\n          formNoValidate\n          className={styles.formTextArea}\n        />\n      </form>\n\n    )}\n  </Formik>\n);\n\nPostForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport default PostForm;\n","import * as types from '../types/post';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const fetchAllPosts = ({\n  profileId,\n  clean,\n}) => ({\n  type: types.FETCHED_ALL_POSTS,\n  payload: {\n    profileId,\n    clean,\n  },\n});\n\nexport const fetchAllPostsConfirm = ({\n  allPosts,\n  currentPage,\n  nextPage,\n}) => ({\n  type: types.FETCHED_ALL_POSTS_SUCCEEDED,\n  payload: {\n    allPosts,\n    currentPage,\n    nextPage,\n  },\n});\n\nexport const fetchAllPostsDecline = ({\n  message,\n}) => ({\n  type: types.FETCHED_ALL_POSTS_FAILED,\n  payload: {\n    message,\n  },\n});\n\nexport const createPost = ({\n  content,\n  randomId = uuidv4(),\n}) => ({\n  type: types.CREATED_POST,\n  payload: {\n    content,\n    randomId,\n  },\n});\n\nexport const createPostConfirm = ({\n  id,\n  randomId,\n  content,\n  date_created,\n  createdBy,\n}) => ({\n  type: types.CREATED_POST_SUCCEEDED,\n  payload: {\n    id,\n    content,\n    date_created,\n    createdBy,\n    randomId,\n  },\n});\n\nexport const createPostDecline = ({\n  randomId,\n  message,\n}) => ({\n  type: types.CREATED_POST_FAILED,\n  payload: {\n    message,\n    randomId,\n  },\n});\n\nexport const deletePost = () => ({\n  type: types.DELETED_POST,\n  payload: {\n\n  },\n});\n\nexport const deletePostConfirm = ({\n  id,\n  content,\n  date_created,\n  createdBy,\n}) => ({\n  type: types.DELETED_POST_SUCCEEDED,\n  payload: {\n    id,\n    content,\n    date_created,\n    createdBy, \n  },\n});\n\nexport const deletePostDecline = ({\n  message,\n}) => ({\n  type: types.DELETED_POST_FAILED,\n  payload: {\n    message\n  },\n});\n\nexport const fetchAllComments = ({\n  postId,\n}) => ({\n  type: types.FETCHED_ALL_COMMENTS,\n  payload: {\n    postId,\n  },\n});\n\nexport const fetchAllCommentsConfirm = ({\n  allComments,\n  postId\n}) => ({\n  type: types.FETCHED_ALL_COMMENTS_SUCCEEDED,\n  payload: {\n    allComments,\n    postId\n  },\n});\n\nexport const fetchAllCommentsDecline = ({\n  postId,\n  message,\n}) => ({\n  type: types.FETCHED_ALL_COMMENTS_FAILED,\n  payload: {\n    message,\n    postId,\n  },\n});\n\nexport const commentPost = ({\n  postId,\n  content,\n  randomId = uuidv4(),\n}) => ({\n  type: types.COMMENTED_POST,\n  payload: {\n    postId,\n    content,\n    randomId,\n  },\n});\n\nexport const commentPostConfirm = ({\n  id,\n  postId,\n  randomId,\n  content,\n  createdBy,\n  dateCreated,\n}) => ({\n  type: types.COMMENTED_POST_SUCCEEDED,\n  payload: {\n    id,\n    postId,\n    content,\n    randomId,\n    createdBy,\n    dateCreated,\n  },\n});\n\nexport const commentPostDecline = ({\n  postId,\n  randomId,\n  message,\n}) => ({\n  type: types.COMMENTED_POST_FAILED,\n  payload: {\n    postId,\n    randomId,\n    message,\n  },\n});\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport PostForm from '../PostForm'\nimport * as postActions from '../../../actions/post';\nimport * as selectors from '../../../reducers';\nimport styles from './post.module.css';\n\nexport const customPropTypes = {\n  content: PropTypes.string,\n  dateCreated: PropTypes.string,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    createdBy: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  createdBy: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }),\n  createComment: PropTypes.func.isRequired,\n  commentLoading: PropTypes.bool,\n  authId: PropTypes.number,\n  authName: PropTypes.string,\n  fetchComments: PropTypes.func.isRequired,\n  postId: PropTypes.number,\n  enableComments: PropTypes.bool.isRequired,\n  commentErrorMessage: PropTypes.string,\n}\n\nclass Post extends Component {\n\n  static propTypes = customPropTypes;\n\n  constructor(props){\n    super(props);\n    this.state = {\n      showComments: false,\n    }\n  }\n\n  loadComments(){\n    const {\n      fetchComments,\n      postId,\n    } = this.props;\n    fetchComments(postId);\n    this.setState({\n      showComments: true,\n    })\n  }\n\n  render(){\n    const {\n      content,\n      dateCreated,\n      comments,\n      createdBy,\n      createComment,\n      commentLoading,\n      authId,\n      authName,\n      enableComments,\n      commentErrorMessage,\n    } = this.props;\n    const {\n      showComments,\n    } = this.state;\n    return(\n      <div className={styles.post} data-test=\"postComponent\">\n        <Link to={`/profile/${createdBy ? createdBy.id : authId}`}> \n          <img\n            src=\"assets/defaultProfile.png\"\n            alt=\"profileImage\"\n          />\n        </Link>\n        <div className={styles.content}>\n          <p className={styles.text}>\n            {createdBy ? createdBy.name : authName}\n          </p>\n          <p className={styles.text}>\n            {content}\n          </p>\n          <p>\n            {createdBy ? dateCreated : \"Creating...\"}\n          </p>\n          <div className={styles.footer}>\n            {\n              !showComments && enableComments && createdBy && (\n                <button onClick={this.loadComments.bind(this)}>\n                  View Comments\n                </button>\n              )\n            }\n          </div>\n          {\n            showComments && (\n              <>\n                {\n                  authId && (\n                    <PostForm onSubmit={createComment}/>\n                  )\n                }\n                {\n                 comments && comments.length ? (\n                    <div className={styles.bot}>\n                      {\n                        comments.map((comment) => (\n                          <Post\n                            key={comment.id}\n                            content={comment.content}\n                            dateCreated={comment.dateCreated}\n                            createdBy={comment.createdBy}\n                          />\n                        ))\n                      }\n                    </div>\n                  ) : (\n                    <>\n                      {\n                        commentErrorMessage ? (\n                          <p>\n                            {commentErrorMessage}\n                          </p>\n                        ) : (\n                        <>\n                          {\n                            !commentLoading && (\n                              <p>\n                                {authId ? \"be the first to comment\" : \"No comment to show\"}\n                              </p>\n\n                            )\n                          }\n                        </>\n                        )\n                      }\n                    </>\n                  )\n                }\n                {\n                  commentLoading && (\n                    <p className={styles.loading}>\n                      Loading...\n                    </p>\n                  )\n                }\n              </>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state, { postId }) => ({\n    commentLoading: selectors.getCommentLoading(state, postId),\n    commentErrorMessage: selectors.getCommentErrorMessage(state, postId),\n    comments: selectors.getAllCommentsByPost(state, postId),\n    authId: selectors.getAuthId(state),\n    authName: selectors.getAuthName(state),\n  }),\n  (dispatch, { postId }) => ({\n    fetchComments(postId){\n      dispatch(postActions.fetchAllComments({\n        postId,\n      }))\n    },\n    createComment(values){\n      dispatch(postActions.commentPost({\n        postId,\n        content: values.content,\n      }))\n    }\n  }),\n)(Post);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport PostForm from '../PostForm';\nimport Post from '../Post'\nimport * as postActions from '../../../actions/post';\nimport * as selectors from '../../../reducers';\nimport styles from './wall.module.css';\n\nexport const customPropTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    created_by: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  fetchPosts: PropTypes.func.isRequired,\n  enabledPost: PropTypes.bool,\n  createPost: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n  next: PropTypes.bool,\n  postErrors: PropTypes.string,\n}\n\n\nclass Wall extends Component {\n\n  static propTypes = customPropTypes;\n\n  componentDidMount(){\n    const {\n      fetchPosts\n    } = this.props;\n    fetchPosts({\n      clean: true,\n    });\n  }\n\n  render() {\n    const {\n      posts,\n      createPost,\n      enabledPost,\n      loading,\n      fetchPosts,\n      next,\n      postErrors,\n    } = this.props\n    return (\n      <div className={styles.wall} data-test=\"wallComponent\">\n        {\n          enabledPost && (\n            <PostForm data-test=\"postFormComponent\" onSubmit={createPost}/>\n          )\n        }\n        {\n          posts && posts.length && postErrors === undefined ? (\n            <>\n              {\n                posts.map((post) => (\n                  <Post\n                    key={post.id}\n                    postId={post.id}\n                    content={post.content}\n                    dateCreated={post.dateCreated}\n                    comments={post.comments}\n                    createdBy={post.createdBy}\n                    enableComments\n                  />\n                ))\n              }\n            </>\n          ) : (\n            <>\n              {\n                !loading && (\n                  <p data-test=\"postPlaceholderComponent\">\n                    {postErrors ? postErrors  : \"No posts to display\"}\n                  </p>\n                )\n              }\n            </>\n          )\n        }\n        {\n          loading ? (\n            <h3 className={styles.loading} data-test=\"postLoadingComponent\">\n              Loading...\n            </h3>\n          ) : (\n            <>\n              {\n                next && (\n                  <button className={styles.more} onClick={() => fetchPosts()}>\n                    more\n                  </button>\n                )\n              }\n            </>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n    postErrors: selectors.getPostErrors(state),\n    next: selectors.getIfNextPage(state),\n  }),\n  (dispatch) => ({\n    createPost(values){\n      dispatch(postActions.createPost({\n        content: values.content\n      }))\n    }\n  }),\n)(Wall);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Wall from '../General/Wall';\nimport { connect } from \"react-redux\";\nimport * as postActions from '../../actions/post';\nimport * as selectors from '../../reducers';\nimport styles from './main.module.css';\n\nexport const customPropTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    created_by: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  postLoading: PropTypes.bool,\n  authId: PropTypes.number,\n  fetchAllPost: PropTypes.func.isRequired,\n}\n\nclass Main extends Component {\n\n  static propTypes = customPropTypes;\n\n  render() {\n    const {\n      posts,\n      postLoading,\n      authId,\n      fetchAllPost,\n    } = this.props;\n    return(\n      <div\n        className={styles.main}\n        data-test=\"mainComponent\"\n      >\n        <Wall\n          fetchPosts={fetchAllPost}\n          posts={posts}\n          enabledPost={authId}\n          loading={postLoading}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default connect(\n  (state) => ({\n    postLoading: selectors.getPostLoading(state),\n    posts: selectors.getAllPosts(state),\n    authId: selectors.getAuthId(state),\n  }),\n  (dispatch) => ({\n    fetchAllPost(clean) {\n      dispatch(postActions.fetchAllPosts({\n        clean,\n      }));\n    },\n  }),\n)(Main);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from '../General/FormInput';\nimport * as selectors from '../../reducers';\nimport * as userActions from '../../actions/user';\nimport styles from './register.module.css';\n\nexport const customPropTypes = {\n  doRegister: PropTypes.func.isRequired,\n  stateErrors: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n    city: PropTypes.string,\n    gender: PropTypes.string,\n    password: PropTypes.string,\n    other: PropTypes.string,\n  }),\n  userLoading: PropTypes.bool.isRequired,\n}\n\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n  name: Yup.string()\n    .min(2, 'Too Short')\n    .max(50, 'Too Long')\n    .required('Required'),\n  city: Yup.string()\n    .min(2, 'Too Short')\n    .max(50, 'Too Long')\n    .required('Required'),\n  genre: Yup.string()\n    .required('Required'),\n  password: Yup.string()\n    .min(2, 'Too Short')\n    .max(50, 'Too Long')\n    .required('Required'),\n  password2: Yup.string()\n    .required('Required'),\n});\n\nconst registerCamps = [\n  {\n    name: \"Email\",\n    id: \"email\",\n    placeholder: \"email\",\n  },\n  {\n    name: \"Name\",\n    id: \"name\",\n    placeholder: \"name\",\n  },\n  {\n    name: \"City\",\n    id: \"city\",\n    placeholder: \"city\",\n  },\n  {\n    name: \"Genre\",\n    id: \"genre\",\n    placeholder: \"genre\",\n    type: \"select\",\n    options: [\n      {\n        label: 'Female',\n        value: 'F',\n      },\n      {\n        label: 'Male',\n        value: 'M',\n      },\n    ],\n  },\n  {\n    name: \"Password\",\n    id: \"password\",\n    placeholder: \"password\",\n    type: \"password\",\n  },\n  {\n    name: \"Check Password\",\n    id: \"password2\",\n    placeholder: \"password\",\n    type: \"password\",\n  }\n]\n\nconst Register = ({\n  doRegister,\n  stateErrors,\n  userLoading,\n}) => (\n  <div\n    className={styles.register}\n    data-test=\"registerComponent\"\n  >\n    <Formik \n      initialValues={{\n        email: undefined,\n        name: undefined,\n        city: undefined,\n        genre: undefined,\n        password: undefined,\n        password2: undefined,\n      }}\n      validationSchema={SignupSchema}\n      validate={values => {\n        const errors = {};\n        if (values.password !== values.password2) {\n          errors.password2 = 'passwords do not match';\n        }\n        return errors;\n\n      }}\n      onSubmit={(values) => {\n        doRegister(values);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleSubmit,\n        handleBlur,\n      }) => (\n          <form onSubmit={handleSubmit} className={styles.form}>\n            <h1>\n              You are welcome!\n            </h1>\n            <h5>\n              we are happy to see you\n            </h5>\n            <div className={styles.camps}>\n              {\n                registerCamps.map((camp) => (\n                  <FormInput\n                    key={camp.id}\n                    bigStyles\n                    error={touched[camp.id] && (errors[camp.id] || (stateErrors && stateErrors[camp.id]))}\n                    handleBlur={handleBlur}\n                    label={camp.name}\n                    name={camp.id}\n                    onChange={handleChange}\n                    options={camp.options}\n                    placeholder={camp.name}\n                    type={camp.type}\n                    value={values[camp.id]}\n                  />\n                ))\n              }\n            </div>\n            <p>\n              &nbsp; \n              {\n                userLoading && \"Loading...\"\n              }\n              {\n                stateErrors && stateErrors.other \n              }\n            </p>\n            <button type=\"submit\">\n              Submit\n            </button>\n          </form>\n        )\n      }\n    </Formik>\n  </div>\n)\n\nRegister.propTypes = customPropTypes;\n\nexport default connect(\n  (state) => ({\n    stateErrors: selectors.getUserErrors(state),\n    userLoading: selectors.getUserLoading(state),\n  }),\n  (dispatch) => ({\n    doRegister(values) {\n      dispatch(userActions.registerUser({\n        email: values.email,\n        name: values.name,\n        city: values.city,\n        genre: values.genre,\n        password: values.password,\n      }))\n    }\n  }),\n)(Register)\n\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { compose } from 'redux'\nimport PropTypes from 'prop-types';\nimport {\n  withRouter,\n} from \"react-router-dom\";\nimport Wall from '../General/Wall';\nimport * as userActions from '../../actions/user';\nimport * as postActions from '../../actions/post';\nimport * as selectors from '../../reducers';\nimport styles from './profile.module.css';\n\nexport const customPropTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    created_by: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  fetchAllPostForUser: PropTypes.func.isRequired,\n  postLoading: PropTypes.bool,\n  authId: PropTypes.number,\n  userErrors: PropTypes.shape({\n    other: PropTypes.string,\n  }),\n  userInformation: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n    city: PropTypes.string,\n    genre: PropTypes.string,\n    dateCreated: PropTypes.string,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      profileId: PropTypes.string,\n    })\n  })\n}\n\n\nclass Profile extends Component {\n\n  static propTypes = customPropTypes;\n\n  componentDidMount() {\n    const {\n      fetchProfileInfo,\n    } = this.props;\n    fetchProfileInfo();\n  }\n\n  render() {\n    const {\n      posts,\n      fetchAllPostForUser,\n      postLoading,\n      userErrors,\n      userInformation: {\n        email,\n        name,\n        city,\n        gender,\n        dateCreated,\n      },\n      authId,\n      match: {\n        params: {\n          profileId,\n        },\n      },\n    } = this.props;\n    return (\n      <div className={styles.profile} data-test=\"profileComponent\">\n        <div className={styles.information}>\n          <img\n            src=\"assets/defaultProfile.png\"\n            alt=\"profileImage\"\n            className={styles.profileImage}\n          />\n          {\n            userErrors && userErrors.other ? (\n              <p>\n                {userErrors.other}\n              </p>\n            ) : (\n              <>\n                {\n                  name && (\n                    <p>\n                      name: {name}\n                    </p>\n                  )\n                }\n                {\n                  email && (\n                    <p>\n                      email: {email}\n                    </p>\n                  )\n                }\n                {\n                  city && (\n                    <p>\n                      city: {city}\n                    </p>\n                  )\n                }\n                {\n                  gender && (\n                    <p>\n                      gender: {gender}\n                    </p>\n                  )\n                }\n                {\n                  dateCreated && (\n                    <p>\n                      date joined: {dateCreated}\n                    </p>\n                  )\n                }\n              </>\n            )\n          }\n        </div>\n        <Wall\n          fetchPosts={fetchAllPostForUser}\n          posts={posts}\n          enabledPost={authId === parseInt(profileId)}\n          loading={postLoading}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default compose(\n  withRouter,\n  connect(\n    (state) => ({\n      postLoading: selectors.getPostLoading(state),\n      posts: selectors.getAllPosts(state), \n      userInformation: selectors.getUserInformation(state),\n      userErrors: selectors.getUserErrors(state),\n      authId: selectors.getAuthId(state),\n    }),\n    (dispatch, {...props}) => ({\n      fetchAllPostForUser(clean) {\n        const {\n          match: {\n            params: {\n              profileId,\n            },\n          }\n        } = props;\n        dispatch(postActions.fetchAllPosts({\n          clean,\n          profileId,\n        }));\n      },\n      fetchProfileInfo() {\n        const {\n          match: {\n            params: {\n              profileId,\n            },\n          }\n        } = props;\n        dispatch(userActions.fetchProfileInfo({\n          profileId,\n        }));\n      },\n    }),\n  )\n)(Profile); \n","import React from 'react';\nimport {\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\nimport Header from '../Header';\nimport Main from '../Main';\nimport Register from '../Register';\nimport Profile from '../Profile';\nimport styles from './app.module.css';\n\nconst options = [\n  {\n    word: 'main',\n    path: '/main',\n    component: Main,\n  },\n  {\n    word: 'profile',\n    path: '/profile/:profileId',\n    component: Profile,\n  },\n  {\n    word: 'register',\n    path: '/register',\n    component: Register,\n  },\n];\n\nconst App = () => (\n  <div className={styles.app} data-test=\"dataComponent\">\n    <Header />\n    <Switch>\n      {\n        options.map((prop) => {\n          const View = prop.component;\n          return (\n            <Route\n              path={prop.path}\n              render={() => <View />}\n              key={prop.word}\n            />\n          );\n        })\n      }\n      <Redirect to=\"/main\" />\n    </Switch>\n  </div>\n);\n\nexport default App;\n","const URL = 'http://localhost:8000';\n//const URL = 'PRODUCTION URL';\n\nexport default URL;","import CURRENT_URL from './routes';\n\nexport const getProfileInfo = (\n  profileId,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/users/profile/${profileId}/`)\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const registerUser = (\n  email,\n  name,\n  city,\n  genre,\n  password,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/users/register/`, {\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      name,\n      city,\n      genre,\n      password,\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const doLogin = (\n  email,\n  password,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/users/login/`, {\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password,\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});","import {\n  put,\n  takeLatest,\n  call,\n} from 'redux-saga/effects';\nimport { forwardTo } from '../history';\nimport * as userTypes from '../types/user';\nimport * as userActions from '../actions/user';\nimport * as userApi from '../apis/user';\n\nexport function* profileFetcher(action) {\n  const {\n    payload: {\n      profileId,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      userApi.getProfileInfo,\n      profileId\n    );\n    if(!error){\n      yield put(userActions.fetchProfileInfoConfirm({\n        profileId: response.id,\n        email: response.email,\n        name: response.name,\n        city: response.city,\n        gender: response.gender,\n        dateCreated: response.date_created,\n      }));\n    } else {\n      yield put(userActions.fetchProfileInfoDecline({\n        message: {\n          other: response.detail,\n        }\n      }));\n      yield call(forwardTo, '/');\n    }\n    if (logout) {\n      // alert(\"Your session has expired\");\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(userActions.fetchProfileInfoDecline({\n      message: {\n        other:\"Something went wrong :(\"\n      },\n    }));\n  }\n}\n\nexport function* userRegister(action) {\n  const {\n    payload: {\n      email,\n      name,\n      city,\n      gender,\n      password,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      userApi.registerUser,\n      email,\n      name,\n      city,\n      gender,\n      password,\n    );\n    if(!error){\n      yield call(forwardTo, '/');\n      yield put(userActions.registerUserConfirm({\n        profileId: response.id,\n        email: response.email,\n        name: response.name,\n        city: response.city,\n        gender: response.gender,\n      }));\n    } else {\n      yield put(userActions.registerUserDecline({\n        message: response,\n      }));  \n    }\n    if (logout) {\n      // alert(\"Your session has expired\");\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(userActions.registerUserDecline({\n      message: {\n        other: \"Something went wrong :(\"\n      },\n    }));\n  }\n}\n\nexport function* userLogIn(action) {\n  const {\n    payload: {\n      email,\n      password,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      userApi.doLogin,\n      email,\n      password,\n    );\n    if(!error){\n      yield put(userActions.doLoginConfirm({\n        id: response.id,\n        token: response.token,\n        name: response.name,\n      }));\n    } else {\n      yield put(userActions.doLoginDecline({\n        message: {\n          email: response.error,\n        }\n      }));\n    }\n    if (logout) {\n      // alert(\"Your session has expired\");\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    console.log(error)\n    yield put(userActions.doLoginDecline({\n      message: {\n        email: \"Something went wrong :(\",\n      },\n    }));\n  }\n}\n\n\n\nfunction* LoginSaga() {\n  yield takeLatest(\n    userTypes.FETCHED_USER_PROFILE,\n    profileFetcher\n  );\n  yield takeLatest(\n    userTypes.USER_REGISTERED,\n    userRegister\n  );\n  yield takeLatest(\n    userTypes.USER_LOGED_IN,\n    userLogIn\n  );\n}\n\nexport default LoginSaga;\n","import CURRENT_URL from './routes';\n\nexport const getAllPosts = (\n  profileId,\n  limit,\n  offset,\n) => new Promise((resolve, reject) => {\n  const url = new URL(`${CURRENT_URL}/posts/`);\n  const params = {\n    created_by: profileId,\n    limit,\n    offset,\n  }\n  Object.keys(params).forEach(key => params[key] && url.searchParams.append(key, params[key]))\n  fetch(url).then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const getAllComments = (\n  postId,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/posts/${postId}/`)\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\n\nexport const createPost = (\n  token,\n  content,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/posts/`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      content\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const createComment = (\n  token,\n  postId,\n  content,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/posts/${postId}/`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      content\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});","import {\n  put,\n  takeLatest,\n  call,\n  select,\n} from 'redux-saga/effects';\nimport {\n  getUserToken,\n  getCurrentPage,\n  getPageSize,\n} from '../reducers';\nimport * as postTypes from '../types/post';\nimport * as postActions from '../actions/post';\nimport * as userActions from '../actions/user';\nimport * as postApi from '../apis/post';\n\nexport function* postFetcher(action) {\n  const {\n    payload: {\n      profileId,\n    },\n  } = action;\n  const currentPage = yield select(getCurrentPage);\n  const pageSize = yield select(getPageSize);\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      postApi.getAllPosts,\n      profileId,\n      pageSize,\n      currentPage + 1,\n    );\n    if(!error) {\n      yield put(postActions.fetchAllPostsConfirm({\n        allPosts: response.results,\n        currentPage: currentPage + 1, \n        nextPage: response.next !== null ? true : false,\n      }));\n    } else {\n      yield put(postActions.fetchAllPostsDecline({\n        message: response,\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.fetchAllPostsDecline({\n      message: \"Something went wrong :(\",\n    }));\n  }\n}\n\nexport function* commentsFetcher(action) {\n  const {\n    payload: {\n      postId,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n     } = yield call(\n      postApi.getAllComments,\n      postId\n    );\n    if(!error){\n      yield put(postActions.fetchAllCommentsConfirm({\n        allComments: response,\n        postId,\n      }));\n    } else {\n      yield put(postActions.fetchAllCommentsDecline({\n        message: response,\n        postId,\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.fetchAllCommentsDecline({\n      message: \"Something went wrong :(\",\n      postId,\n    }));\n  }\n}\n\nexport function* postCreator(action) {\n  const {\n    payload: {\n      content,\n      randomId,\n    },\n  } = action;\n  const token = yield select(getUserToken);\n  try {\n    const {\n      response,\n      error,\n      logout,\n     } = yield call(\n      postApi.createPost,\n      token,\n      content\n    );\n    if(!error) {\n      yield put(postActions.createPostConfirm({\n        id: response.id,\n        randomId,\n        content: response.content,\n        date_created: response.date_created,\n        createdBy: response.created_by,\n      })); \n    } else {\n      yield put(postActions.createPostDecline({\n        randomId,\n        message: response,\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.createPostDecline({\n      randomId,\n      message: \"Something went wrong :(\",\n    }));\n  }\n}\n\nexport function* commentCreator(action) {\n  const {\n    payload: {\n      postId,\n      content,\n      randomId,\n    },\n  } = action;\n  const token = yield select(getUserToken);\n  try {\n    const {\n      response,\n      error,\n      logout,\n     } = yield call(\n      postApi.createComment,\n      token,\n      postId,\n      content\n    );\n    if(!error) {\n      yield put(postActions.commentPostConfirm({\n        postId,\n        id: response.id,\n        content: response.content,\n        dateCreated: response.date_created,\n        createdBy: response.created_by,\n        randomId,\n      }));\n    } else {\n      yield put(postActions.commentPostDecline({\n        message: response,\n        postId,\n        randomId,\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.commentPostDecline({\n      message: \"Something went wrong :(\",\n      postId,\n      randomId,\n    }));\n  }\n}\n\nfunction* LoginSaga() {\n  yield takeLatest(\n    postTypes.FETCHED_ALL_POSTS,\n    postFetcher\n  );\n  yield takeLatest(\n    postTypes.FETCHED_ALL_COMMENTS,\n    commentsFetcher\n  );\n  yield takeLatest(\n    postTypes.CREATED_POST,\n    postCreator\n  );\n  yield takeLatest(\n    postTypes.COMMENTED_POST,\n    commentCreator\n  );\n}\n\nexport default LoginSaga;\n","import { fork, all } from 'redux-saga/effects';\nimport UserSaga from './user';\nimport PostSaga from './post';\n\nfunction* mainSaga() {\n  yield all([\n    fork(UserSaga),\n    fork(PostSaga),\n  ]);\n}\n\nexport default mainSaga;\n","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from './reducers';\nimport mainSaga from './sagas';\n\nexport const sagaMiddleware = createSagaMiddleware();\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: [\n    'authReducer',\n  ],\n};\n\nconst configureStore = () => {\n  const persistedReducer = persistReducer(persistConfig, reducer);\n  const store = createStore(\n    persistedReducer,\n    applyMiddleware(sagaMiddleware),\n  );\n  const persistor = persistStore(store);\n\n  sagaMiddleware.run(mainSaga);\n  return { store, persistor };\n};\n\n\nexport default configureStore;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router-dom';\nimport { history } from './history';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport configureStore from './configureStore';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst storeConfig = configureStore();\n\nReactDOM.render(\n    <Provider store={storeConfig.store}>\n      <PersistGate loading={null} persistor={storeConfig.persistor}>\n        <Router history={history}>\n          <App />\n        </Router>\n      </PersistGate>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__3dfXB\",\"content\":\"post_content__h2BkW\",\"footer\":\"post_footer__1K30M\",\"bot\":\"post_bot__3fWVl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__HZ6Fg\",\"logo\":\"header_logo__3iSgw\",\"greedings\":\"header_greedings__1YUq6\",\"login\":\"header_login__1zFFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"formInput_formInput__3UlXG\",\"big\":\"formInput_big__haJIS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wall\":\"wall_wall__1zXmL\",\"loading\":\"wall_loading__1G0Pv\",\"more\":\"wall_more__1gFhk\",\"form\":\"wall_form__1jCAV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"register_register__1d8O4\",\"form\":\"register_form__31fhn\",\"camps\":\"register_camps__P94z_\",\"errorMessage\":\"register_errorMessage__14tM_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__38jCY\",\"information\":\"profile_information__1SAyB\",\"profileImage\":\"profile_profileImage__3LwRO\",\"friends\":\"profile_friends__14eNu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"postForm_form__3-cWl\",\"formTextArea\":\"postForm_formTextArea__3GIrn\"};"],"sourceRoot":""}