{"version":3,"sources":["components/Main/main.module.css","components/App/app.module.css","history.js","components/General/FormInput/index.jsx","types/user.js","reducers/auth.js","types/post.js","reducers/post.js","reducers/user.js","reducers/index.js","actions/user.js","components/Header/index.jsx","components/General/PostForm/index.jsx","actions/post.js","components/General/Post/index.jsx","components/General/Wall/index.jsx","components/Main/index.jsx","components/Register/index.jsx","components/Profile/index.jsx","components/App/index.jsx","apis/routes.js","apis/user.js","sagas/user.js","apis/post.js","sagas/post.js","sagas/index.js","configureStore.js","reportWebVitals.js","index.js","components/General/Post/post.module.css","components/Header/header.module.css","components/General/Wall/wall.module.css","components/General/FormInput/formInput.module.css","components/Register/register.module.css","components/Profile/profile.module.css","components/General/PostForm/postForm.module.css"],"names":["module","exports","history","createBrowserHistory","forwardTo","location","push","FormInput","name","label","error","type","placeholder","onChange","value","handleBlur","bigStyles","options","data-test","className","styles","formInput","big","onBlur","autoFocus","formNoValidate","map","option","defaultProps","USER_LOGED_IN","USER_LOGED_IN_SUCCEEDED","USER_LOGED_IN_FAILED","USER_LOGED_OUT","USER_REGISTERED","USER_REGISTERED_FAILED","FETCHED_USER_PROFILE","FETCHED_USER_PROFILE_SUCCEEDED","FETCHED_USER_PROFILE_FAILED","stateShape","id","undefined","token","authenticated","auth","state","action","types","payload","FETCHED_ALL_POSTS","FETCHED_ALL_POSTS_SUCCEEDED","FETCHED_ALL_POSTS_FAILED","CREATED_POST","CREATED_POST_SUCCEEDED","CREATED_POST_FAILED","FETCHED_ALL_COMMENTS","FETCHED_ALL_COMMENTS_SUCCEEDED","FETCHED_ALL_COMMENTS_FAILED","COMMENTED_POST","COMMENTED_POST_SUCCEEDED","COMMENTED_POST_FAILED","postDefaultState","loadingPosts","postErrors","wallErrors","nextPage","currentPage","pageSize","combineReducers","post","postTypes","clean","message","byId","content","randomId","postByIdState","commentsById","commentsOrder","date_created","createdBy","date","Date","dateCreated","getMonth","getDate","getFullYear","commentsErrors","postId","oldPost","shift","allPosts","Object","values","forEach","created_by","loadingComments","allComments","comment","comments","order","postOrderState","getPostById","genderDict","M","F","defaultUserState","profileId","email","city","gender","loading","registerErrors","password","other","user","userTypes","authReducer","postReducer","userReducer","getUserToken","fromAuthReducer","getIfAuthorized","getAuthId","getAuthName","getWallErrors","fromPostReducer","getPostErrors","getIfNextPage","getCurrentPage","getPageSize","getPostLoading","getCommentLoading","getCommentErrorMessage","getAllPosts","getAllCommentsByPost","commentId","getCommentById","getUserInformation","getUserErrors","fromUserReducer","getUserLoading","doLoginConfirm","doLoginDecline","doLogout","registerUserDecline","fetchProfileInfoConfirm","fetchProfileInfoDecline","SignupSchema","PropTypes","bool","func","isRequired","object","shape","string","number","Yup","required","registerCamps","compose","withRouter","connect","authId","selectors","authorized","stateErrors","dispatch","doLogin","userActions","header","to","logo","src","alt","greedings","onClick","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleSubmit","login","camp","PostSchema","max","PostForm","actions","resetForm","form","disabled","formTextArea","fetchAllPosts","fetchAllPostsConfirm","fetchAllPostsDecline","createPostConfirm","createPostDecline","fetchAllCommentsConfirm","fetchAllCommentsDecline","commentPostConfirm","commentPostDecline","Post","arrayOf","props","showComments","this","fetchComments","setState","createComment","commentLoading","authName","enableComments","commentErrorMessage","text","footer","loadComments","bind","length","bot","Component","postActions","uuidv4","Wall","fetchPosts","posts","createPost","enabledPost","next","wall","more","Main","postLoading","fetchAllPost","main","min","password2","userLoading","doRegister","register","genre","validate","camps","Profile","params","fetchProfileInfo","fetchAllPostForUser","userErrors","userInformation","match","profile","information","profileImage","parseInt","word","path","component","Register","App","app","prop","View","render","URL","getProfileInfo","Promise","resolve","reject","fetch","CURRENT_URL","then","resultado","ok","json","res","response","logout","status","catch","registerUser","headers","method","body","JSON","stringify","profileFetcher","userRegister","userLogIn","LoginSaga","call","userApi","put","detail","console","log","takeLatest","limit","offset","url","keys","key","searchParams","append","getAllComments","Authorization","postFetcher","commentsFetcher","postCreator","commentCreator","select","postApi","results","mainSaga","all","fork","UserSaga","PostSaga","sagaMiddleware","createSagaMiddleware","persistConfig","storage","whitelist","configureStore","persistedReducer","persistReducer","reducer","store","createStore","applyMiddleware","persistor","persistStore","run","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","storeConfig","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.abf44c3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"main_main__3NTyC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__WPEG2\"};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n\nexport const forwardTo = (location) => {\n  history.push(location);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './formInput.module.css';\n\nconst FormInput = ({\n  name,\n  label,\n  error,\n  type,\n  placeholder,\n  onChange,\n  value,\n  handleBlur,\n  bigStyles,\n  options,\n}) => (\n  <div\n    data-test=\"postFormComponent\"\n    className={bigStyles ? `${styles.formInput} ${styles.big}` : styles.formInput}\n  >\n    {\n      label && (\n        <label>\n          {label}:\n          {\n            error && (\n              <span> {error}* </span>\n            )\n          }\n        </label>\n      )\n    }\n    {\n      (type === \"text\" || type === \"password\") && (\n        <input\n          onBlur={handleBlur}\n          name={name}\n          type={type}\n          onChange={onChange}\n          placeholder={placeholder}\n          value={value}\n          autoFocus={false}\n          formNoValidate\n        />\n      )\n    }\n    {\n      type === \"select\" && (\n        <select\n          onBlur={handleBlur}\n          name={name}\n          type={type}\n          onChange={onChange}\n          placeholder={placeholder}\n          value={value}\n          autoFocus={false}\n          formNoValidate\n        >\n          <option />\n          {\n            options.map((option) => (\n              <option\n                value={option.value}\n                key={option.value}\n              >{option.label}</option>\n\n            ))\n          }\n        </select>\n      )\n    }\n    \n    {\n      !label && (\n        <label>\n          {\n            error && (\n              <span> {error}* </span>\n            )\n          }\n          &nbsp;\n        </label>\n      )\n    }\n  </div>\n);\n\nFormInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  error: PropTypes.string,\n  type: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.any,\n  handleBlur: PropTypes.func,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.any ,\n    label: PropTypes.string,\n  })),\n  bigStyles: PropTypes.bool,\n};\n\nFormInput.defaultProps = {\n  type: \"text\",\n  bigStyles: false,\n  placeholder: \"\",\n};\n\nexport default FormInput;\n","export const USER_LOGED_IN = 'USER_LOGED_IN';\nexport const USER_LOGED_IN_SUCCEEDED = 'USER_LOGED_IN_SUCCEEDED';\nexport const USER_LOGED_IN_FAILED = 'USER_LOGED_IN_FAILED';\nexport const USER_LOGED_OUT = 'USER_LOGED_OUT';\nexport const USER_LOGED_OUT_SUCCEEDED = 'USER_LOGED_OUT_SUCCEEDED';\nexport const USER_LOGED_OUT_FAILED = 'USER_LOGED_OUT_FAILED';\nexport const USER_REGISTERED = 'USER_REGISTERED';\nexport const USER_REGISTERED_SUCCEEDED = 'USER_REGISTERED_SUCCEEDED';\nexport const USER_REGISTERED_FAILED = 'USER_REGISTERED_FAILED';\nexport const FETCHED_USER_PROFILE = 'FETCHED_USER_PROFILE';\nexport const FETCHED_USER_PROFILE_SUCCEEDED = 'FETCHED_USER_PROFILE_SUCCEEDED';\nexport const FETCHED_USER_PROFILE_FAILED = 'FETCHED_USER_PROFILE_FAILED';","import * as types from '../types/user';\n\nconst stateShape = {\n  id: undefined,\n  name: undefined,\n  token: undefined,\n  authenticated: false,\n};\n\nconst auth = (state = stateShape, action) => {\n  switch (action.type) {\n    case types.USER_LOGED_IN_SUCCEEDED: {\n      const {\n        payload:{\n          id,\n          name,\n          token,\n        }\n      } = action;\n      return {\n        ...state,\n        id,\n        name,\n        token,\n        authenticated: true,\n      };\n    }\n    case types.USER_LOGED_IN_FAILED:\n    case types.USER_LOGED_OUT: {\n      return stateShape;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default auth;\n\nexport const getUserToken = (state) => state.token;\nexport const getIfAuthorized = (state) => state.authenticated;\nexport const getAuthId = (state) => state.id;\nexport const getAuthName = (state) => state.name;\n","export const FETCHED_ALL_POSTS = 'FETCHED_ALL_POSTS';\nexport const FETCHED_ALL_POSTS_SUCCEEDED = 'FETCHED_ALL_POSTS_SUCCEEDED';\nexport const FETCHED_ALL_POSTS_FAILED = 'FETCHED_ALL_POSTS_FAILED';\nexport const CREATED_POST = 'CREATED_POST';\nexport const CREATED_POST_SUCCEEDED = 'CREATED_POST_SUCCEEDED';\nexport const CREATED_POST_FAILED = 'CREATED_POST_FAILED';\nexport const DELETED_POST = 'DELETED_POST';\nexport const DELETED_POST_SUCCEEDED = 'DELETED_POST_SUCCEEDED';\nexport const DELETED_POST_FAILED = 'DELETED_POST_FAILED';\nexport const FETCHED_ALL_COMMENTS = 'FETCHED_ALL_COMMENTS';\nexport const FETCHED_ALL_COMMENTS_SUCCEEDED = 'FETCHED_ALL_COMMENTS_SUCCEEDED';\nexport const FETCHED_ALL_COMMENTS_FAILED = 'FETCHED_ALL_COMMENTS_FAILED';\nexport const COMMENTED_POST = 'COMMENTED_POST';\nexport const COMMENTED_POST_SUCCEEDED = 'COMMENTED_POST_SUCCEEDED';\nexport const COMMENTED_POST_FAILED = 'COMMENTED_POST_FAILED';","import { combineReducers } from 'redux';\nimport * as postTypes from '../types/post';\n\nexport const postDefaultState = {\n  loadingPosts: false,\n  postErrors: undefined,\n  wallErrors: undefined,\n  nextPage: false,\n  currentPage: -1,\n  pageSize: 3,\n};\n\nconst post = (state = postDefaultState, action) => {\n  switch(action.type) {\n    case postTypes.FETCHED_ALL_POSTS: {\n      const {\n        payload: {\n          clean\n        }\n      } = action; \n      return {\n        ...state,\n        loadingPosts: true,\n        nextPage: clean ? false : state.currentPage,\n        currentPage: clean ? -1 : state.currentPage,\n      }\n    }\n    case postTypes.FETCHED_ALL_POSTS_SUCCEEDED: {\n      const {\n        payload: {\n          nextPage,\n          currentPage,\n        },\n      } = action;\n      return {\n        ...state,\n        nextPage,\n        currentPage,\n        loadingPosts: false,\n        postErrors: undefined,\n      }\n    }\n    case postTypes.CREATED_POST_FAILED: {\n      const {\n        payload: {\n          message,\n        },\n      } = action;\n      return {\n        ...state,\n        loadingPosts: false,\n        wallErrors: message,\n      }\n    }\n    case postTypes.FETCHED_ALL_POSTS_FAILED: {\n      const {\n        payload: {\n          message,\n        },\n      } = action;\n      return {\n        ...state,\n        loadingPosts: false,\n        postErrors: message,\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst byId = (state={}, action) => {\n  switch (action.type) {\n    case postTypes.CREATED_POST: {\n      const {\n        payload: {\n          content,\n          randomId,\n        },\n      } = action;\n      const postByIdState = {\n        ...state,\n        [randomId]: {\n          content,\n          commentsById: {},\n          commentsOrder: [],\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.CREATED_POST_SUCCEEDED: {\n      const {\n        payload: {\n          id,\n          randomId,\n          content,\n          date_created,\n          createdBy,\n        },\n      } = action;\n      const date = new Date(date_created);\n      const postByIdState = {\n        ...state,\n        [randomId]: {\n          id,\n          content,\n          dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n          createdBy,\n          commentsById: {},\n          commentsOrder: [],\n          commentsErrors: undefined,\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.CREATED_POST_FAILED: {\n      const {\n        payload: {\n          randomId,\n        },\n      } = action;\n      const postByIdState = {...state};\n      delete postByIdState[randomId];\n      return postByIdState;\n    }\n    case postTypes.COMMENTED_POST: {\n      const {\n        payload: {\n          postId,\n          content,\n          randomId,\n        } \n      } = action;\n      const oldPost = state[postId];\n      const postByIdState = {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          \n          commentsById: {\n            [randomId] : {\n              content,\n            },\n            ...oldPost.commentsById,\n          },\n          commentsOrder: [\n            randomId,\n            ...oldPost.commentsOrder,\n          ],\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.COMMENTED_POST_SUCCEEDED: {\n      const {\n        payload: {\n          postId,\n          id,\n          content,\n          createdBy,\n          dateCreated,\n          randomId,\n        } \n      } = action;\n      const oldPost = state[postId];\n      const date = new Date(dateCreated);\n      const postByIdState = {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          commentsById: {\n            ...state[postId].commentsById,\n            [randomId] : {\n              content,\n              id,\n              createdBy,\n              dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n            },\n          },\n        }\n      }\n      return postByIdState;\n    }\n    case postTypes.COMMENTED_POST_FAILED: {\n      const {\n        payload: {\n          postId,\n          randomId,\n          message,\n        } \n      } = action;\n      const oldPost = state[postId];\n      delete oldPost.commentsById[randomId];\n      oldPost.commentsOrder.shift();\n      const postByIdState = {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          commentsErrors: message,\n        },\n      }\n      return postByIdState;\n    }\n    case postTypes.FETCHED_ALL_POSTS: {\n      const {\n        payload: {\n          clean\n        }\n      } = action; \n      return clean ? {} : state\n    }\n    case postTypes.FETCHED_ALL_POSTS_SUCCEEDED: {\n      const {\n        payload: {\n          allPosts,\n        },\n      } = action;\n      const postByIdState = {...state}\n      Object.values(allPosts).forEach((post) => {\n        const date = new Date(post.date_created);\n        postByIdState[post.id] = {\n          ...postByIdState[post.id],\n          content: post.content,\n          id: post.id,\n          createdBy: post.created_by,\n          dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n          commentsById: {},\n          commentsOrder: [],\n          loadingComments: false,\n          commentsErrors: undefined,\n        }\n      });\n      return postByIdState;\n    }\n    case postTypes.FETCHED_ALL_COMMENTS: {\n      const {\n        payload: {\n          postId,\n        },\n      } = action;\n      const oldPost = state[postId];\n      return {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          loadingComments: true,\n        },\n      }\n    }\n    case postTypes.FETCHED_ALL_COMMENTS_FAILED: {\n      const {\n        payload: {\n          postId,\n          message,\n        },\n      } = action;\n      const oldPost = state[postId];\n      return {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          loadingComments: false,\n          commentsErrors: message,\n        },\n      }\n    }\n    case postTypes.FETCHED_ALL_COMMENTS_SUCCEEDED: {\n      const {\n        payload: {\n          allComments,\n          postId,\n        },\n      } = action;\n      const oldPost = state[postId];\n      const commentsById = {}\n      Object.values(allComments).forEach((comment) => {\n        const date = new Date(comment.date_created);\n        commentsById[comment.id] = {\n          ...commentsById[comment.id],\n          id: comment.id,\n          content: comment.content,\n          createdBy: comment.created_by,\n          dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n        }\n      });;\n      const commentsOrder = Object.values(allComments).map((comments) => comments.id);\n      const postByIdState = {\n        ...state,\n        [postId]: {\n          ...oldPost,\n          commentsById,\n          commentsOrder,\n          loadingComments: false,\n        }\n      }\n      return postByIdState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nconst order = (state=[], action) => {\n  switch (action.type) {\n    case postTypes.CREATED_POST: {\n      const {\n        payload: {\n          randomId,\n        },\n      } = action;\n      const postOrderState = [\n        randomId,\n        ...state\n      ]\n      return postOrderState;\n    }\n    case postTypes.CREATED_POST_FAILED: {\n      const postOrderState = [...state];\n      postOrderState.shift();\n      return postOrderState;\n    }\n    case postTypes.FETCHED_ALL_POSTS: {\n      const {\n        payload: {\n          clean\n        }\n      } = action; \n      return clean ? [] : state\n    }\n    case postTypes.FETCHED_ALL_POSTS_SUCCEEDED: {\n      const {\n        payload: {\n          allPosts,\n        },\n      } = action;\n      const postOrderState = Object.values(allPosts).map((post) => post.id);\n      return [\n        ...state,\n        ...postOrderState,\n      ];\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default combineReducers({\n  post,\n  byId,\n  order\n})\n\n//selectores\nexport const getWallErrors = (state) => state.post.wallErrors;\nexport const getPostErrors = (state) => state.post.postErrors;\nexport const getIfNextPage = (state) => state.post.nextPage;\nexport const getCurrentPage = (state) => state.post.currentPage;\nexport const getPageSize = (state) => state.post.pageSize;\nexport const getPostLoading = (state) => state.post.loadingPosts;\nexport const getCommentLoading = (state, postId) => getPostById(state, postId) ? getPostById(state, postId).loadingComments : undefined;\nexport const getCommentErrorMessage = (state, postId) => getPostById(state, postId) ? getPostById(state, postId).commentsErrors : undefined;\nexport const getAllPosts = (state) => state.order.map((id) => getPostById(state, id));\nexport const getPostById = (state, id) => state.byId[id] || undefined; \nexport const getCommentById = (state, postId, commentId) => state.byId[postId] ? state.byId[postId].commentsById[commentId] : undefined;\nexport const getAllCommentsByPost = (state, postId) => \n  state.byId[postId] ? (\n      state.byId[postId].commentsOrder.map((commentId) => getCommentById(state, postId, commentId))\n  ) : ( undefined );\n    \n","import * as userTypes from '../types/user';\n\nconst genderDict = {\n  M: 'Male',\n  F: 'Female',\n}\n\nexport const defaultUserState = {\n  profileId: undefined,\n  email: undefined,\n  name: undefined,\n  city: undefined,\n  gender: undefined,\n  dateCreated: undefined,\n  loading: false,\n  registerErrors: {\n    email: undefined,\n    name: undefined,\n    city: undefined,\n    gender: undefined,\n    password: undefined,\n    other: undefined,\n  },\n};\n\nconst user = (state = defaultUserState, action) => {\n  switch (action.type) {\n    case userTypes.USER_REGISTERED: {\n      return {\n        ...state,\n        loading: true,\n      }\n    }\n    case userTypes.FETCHED_USER_PROFILE_FAILED:\n    case userTypes.USER_LOGED_IN_FAILED: \n    case userTypes.USER_REGISTERED_FAILED: {\n      const {\n        payload: {\n          message\n        } \n      } = action;\n      return {\n        ...state,\n        loading: false,\n        registerErrors: message,\n      }\n    }\n    case userTypes.FETCHED_USER_PROFILE_SUCCEEDED: {\n      const {\n        payload: {\n          profileId,\n          email,\n          name,\n          city,\n          gender,\n          dateCreated,\n        }\n      } = action;\n      const date = new Date(dateCreated);\n      return {\n        profileId,\n        email,\n        name,\n        city,\n        gender: genderDict[gender],\n        loading: false,\n        dateCreated: `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n      }\n    }\n    default: {\n      return {\n        ...state,\n        loading: false,\n        registerErrors: defaultUserState.registerErrors,\n      }\n    }\n  }\n}\n\nexport default user;\n\n//selectores\nexport const getUserErrors = (state) => state.registerErrors;\nexport const getUserLoading = (state) => state.loading;\nexport const getUserInformation = (state) => state;\n\n","import { combineReducers } from 'redux';\nimport authReducer, * as fromAuthReducer from './auth';\nimport postReducer, * as fromPostReducer from './post';\nimport userReducer, * as fromUserReducer from './user';\n\nexport default combineReducers({\n  authReducer,\n  postReducer,\n  userReducer,\n});\n\n//auth\nexport const getUserToken = (state) => fromAuthReducer.getUserToken(state.authReducer);\nexport const getIfAuthorized = (state) => fromAuthReducer.getIfAuthorized(state.authReducer);\nexport const getAuthId = (state) => fromAuthReducer.getAuthId(state.authReducer);\nexport const getAuthName = (state) => fromAuthReducer.getAuthName(state.authReducer);\n\n//post\nexport const getWallErrors = (state) => fromPostReducer.getWallErrors(state.postReducer);\nexport const getPostErrors = (state) => fromPostReducer.getPostErrors(state.postReducer);\nexport const getIfNextPage = (state) => fromPostReducer.getIfNextPage(state.postReducer);\nexport const getCurrentPage = (state) => fromPostReducer.getCurrentPage(state.postReducer);\nexport const getPageSize = (state) => fromPostReducer.getPageSize(state.postReducer);\nexport const getPostLoading = (state) => fromPostReducer.getPostLoading(state.postReducer);\nexport const getCommentLoading = (state, postId) => fromPostReducer.getCommentLoading(state.postReducer, postId);\nexport const getCommentErrorMessage = (state, postId) => fromPostReducer.getCommentErrorMessage(state.postReducer, postId);\nexport const getAllPosts = (state) => fromPostReducer.getAllPosts(state.postReducer);\nexport const getAllCommentsByPost = (state, postId) => fromPostReducer.getAllCommentsByPost(state.postReducer, postId);\n\n//user\nexport const getUserInformation = (state) => fromUserReducer.getUserInformation(state.userReducer);\nexport const getUserErrors = (state) => fromUserReducer.getUserErrors(state.userReducer);\nexport const getUserLoading = (state) => fromUserReducer.getUserLoading(state.userReducer);","import * as types from '../types/user';\n\nexport const doLogin = ({\n  email,\n  password,\n}) => ({\n  type: types.USER_LOGED_IN,\n  payload: {\n    email,\n    password,\n  },\n});\n\nexport const doLoginConfirm = ({\n  id,\n  name,\n  token,\n}) => ({\n  type: types.USER_LOGED_IN_SUCCEEDED,\n  payload: {\n    id,\n    name,\n    token,\n  },\n});\n\nexport const doLoginDecline = ({\n  message,\n}) => ({\n  type: types.USER_LOGED_IN_FAILED,\n  payload: {\n    message,\n  },\n});\n\nexport const doLogout = () => ({\n  type: types.USER_LOGED_OUT,\n  payload: {\n\n  },\n});\n\nexport const doLogoutConfirm = () => ({\n  type: types.USER_LOGED_OUT_SUCCEEDED,\n  payload: {\n\n  },\n});\n\nexport const doLogoutDecline = () => ({\n  type: types.USER_LOGED_OUT_FAILED,\n  payload: {\n\n  },\n});\n\nexport const registerUser = ({\n  email,\n  name,\n  city,\n  gender,\n  password\n}) => ({\n  type: types.USER_REGISTERED,\n  payload: {\n    email,\n    name,\n    city,\n    gender,\n    password\n  },\n});\n\nexport const registerUserConfirm = ({\n  id,\n  name,\n  email,\n}) => ({\n  type: types.USER_REGISTERED_SUCCEEDED,\n  payload: {\n    id,\n    name,\n    email,\n  },\n});\n\nexport const registerUserDecline = ({\n  message,\n}) => ({\n  type: types.USER_REGISTERED_FAILED,\n  payload: {\n    message,\n  },\n});\n\nexport const fetchProfileInfo = ({\n  profileId,\n}) => ({\n  type: types.FETCHED_USER_PROFILE,\n  payload: {\n    profileId,\n  },\n});\n\nexport const fetchProfileInfoConfirm = ({\n  profileId,\n  email,\n  name,\n  city,\n  gender,\n  dateCreated,\n}) => ({\n  type: types.FETCHED_USER_PROFILE_SUCCEEDED,\n  payload: {\n    profileId,\n    email,\n    name,\n    city,\n    gender,\n    dateCreated,\n  },\n});\n\nexport const fetchProfileInfoDecline = ({\n  message,\n}) => ({\n  type: types.FETCHED_USER_PROFILE_FAILED,\n  payload: {\n    message,\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport {\n  Link,\n  withRouter\n} from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from '../General/FormInput';\nimport * as selectors from '../../reducers';\nimport * as userActions from '../../actions/user';\nimport styles from './header.module.css';\n\nexport const customPropTypes = {\n  authorized: PropTypes.bool,\n  doLogin: PropTypes.func.isRequired,\n  history: PropTypes.object,\n  stateErrors: PropTypes.shape({\n    email: PropTypes.string,\n    password: PropTypes.string,\n  }),\n  name: PropTypes.string,\n  doLogout: PropTypes.func.isRequired,\n  authId: PropTypes.number,\n}\n\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n  password: Yup.string()\n    .required('Required'),\n});\n\nconst registerCamps = [\n  {\n    name: \"Email\",\n    id: \"email\",\n    placeholder: \"email\",\n  },\n  {\n    name: \"Password\",\n    id: \"password\",\n    placeholder: \"password\",\n    type: \"password\",\n  },\n]\n\nconst Header = ({\n  authorized,\n  doLogin,\n  history,\n  stateErrors,\n  name,\n  doLogout,\n  authId,\n}) => (\n  <div className={styles.header} data-test=\"headerComponent\">\n    <Link\n      to=\"/\"\n      className={styles.logo}\n    >\n      <img src=\"assets/logo.png\" alt=\"headerLogo\"/>\n    </Link>\n    {\n      authorized ? (\n        <div\n          data-test=\"authorizedComponent\"\n          className={styles.greedings}\n        >\n          <h3>\n            Welcome back! {name}\n          </h3>\n          <button onClick={() => history.push(`/profile/${authId}`)}>Profile </button>\n          <button onClick={() => doLogout()}>Log Out </button>\n        </div>\n      ) : (\n        <Formik \n          data-test=\"unAuthorizedComponent\"\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={(values) => {\n            doLogin(values);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleSubmit,\n            handleBlur,\n          }) => (\n              <div className={styles.login}>\n                <form\n                  className={styles.login}\n                  onSubmit={handleSubmit}\n                >\n                  {\n                    registerCamps.map((camp) => (\n                        <FormInput\n                          key={camp.id}\n                          handleBlur={handleBlur}\n                          name={camp.id}\n                          onChange={handleChange}\n                          error={touched[camp.id] && (errors[camp.id] || (stateErrors && stateErrors[camp.id]))}\n                          options={camp.options}\n                          placeholder={camp.name}\n                          type={camp.type}\n                          value={values[camp.id]}\n                        />\n                    ))\n                  }\n                  <button type=\"submit\">Login </button>\n                </form>\n                <button onClick={() => history.push(\"/register\")}>Register </button>\n              </div>\n            )\n          }\n        </Formik>\n      )\n    }\n  </div>\n);\n\nHeader.propTypes = customPropTypes;\n\nexport default compose(\n  withRouter,\n  connect(\n    (state) => ({\n      authId: selectors.getAuthId(state),\n      name: selectors.getAuthName(state),\n      authorized: selectors.getIfAuthorized(state),\n      stateErrors: selectors.getUserErrors(state),\n    }),\n    (dispatch) => ({\n      doLogin(values) {\n        dispatch(userActions.doLogin({\n          email: values.email,\n          password: values.password,\n        }))\n      },\n      doLogout() {\n        dispatch(userActions.doLogout())\n      }\n    }),\n  )\n)(Header)\n","import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport styles from './postForm.module.css';\n\n\nconst PostSchema = Yup.object().shape({\n  content: Yup.string()\n    .max(280, 'Too Long')\n});\n\nconst PostForm = ({\n  onSubmit\n}) => (\n  <Formik\n    initialValues={{\n      content: undefined,\n    }}\n    validationSchema={PostSchema}\n    onSubmit={(values, actions) => {\n      actions.resetForm({\n        values: {\n          content: '',\n        }\n      })\n      onSubmit(values)\n    }}\n  >\n    {({\n      values,\n      errors,\n      handleChange,\n      handleSubmit\n    }) => (\n      <form className={styles.form} onSubmit={handleSubmit}>\n        <button type=\"submit\" disabled={!values.content || values.content === '' || errors.content}>Comment</button>\n        <textarea\n          id=\"content\"\n          name=\"content\"\n          placeholder=\"Write Something...\"\n          onChange={handleChange}\n          value={values.content}\n          autoFocus={false}\n          formNoValidate\n          className={styles.formTextArea}\n        />\n      </form>\n\n    )}\n  </Formik>\n);\n\nPostForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport default PostForm;\n","import * as types from '../types/post';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const fetchAllPosts = ({\n  profileId,\n  clean,\n}) => ({\n  type: types.FETCHED_ALL_POSTS,\n  payload: {\n    profileId,\n    clean,\n  },\n});\n\nexport const fetchAllPostsConfirm = ({\n  allPosts,\n  currentPage,\n  nextPage,\n}) => ({\n  type: types.FETCHED_ALL_POSTS_SUCCEEDED,\n  payload: {\n    allPosts,\n    currentPage,\n    nextPage,\n  },\n});\n\nexport const fetchAllPostsDecline = ({\n  message,\n}) => ({\n  type: types.FETCHED_ALL_POSTS_FAILED,\n  payload: {\n    message,\n  },\n});\n\nexport const createPost = ({\n  content,\n  randomId = uuidv4(),\n}) => ({\n  type: types.CREATED_POST,\n  payload: {\n    content,\n    randomId,\n  },\n});\n\nexport const createPostConfirm = ({\n  id,\n  randomId,\n  content,\n  date_created,\n  createdBy,\n}) => ({\n  type: types.CREATED_POST_SUCCEEDED,\n  payload: {\n    id,\n    content,\n    date_created,\n    createdBy,\n    randomId,\n  },\n});\n\nexport const createPostDecline = ({\n  randomId,\n  message,\n}) => ({\n  type: types.CREATED_POST_FAILED,\n  payload: {\n    message,\n    randomId,\n  },\n});\n\nexport const deletePost = () => ({\n  type: types.DELETED_POST,\n  payload: {\n\n  },\n});\n\nexport const deletePostConfirm = ({\n  id,\n  content,\n  date_created,\n  createdBy,\n}) => ({\n  type: types.DELETED_POST_SUCCEEDED,\n  payload: {\n    id,\n    content,\n    date_created,\n    createdBy, \n  },\n});\n\nexport const deletePostDecline = ({\n  message,\n}) => ({\n  type: types.DELETED_POST_FAILED,\n  payload: {\n    message\n  },\n});\n\nexport const fetchAllComments = ({\n  postId,\n}) => ({\n  type: types.FETCHED_ALL_COMMENTS,\n  payload: {\n    postId,\n  },\n});\n\nexport const fetchAllCommentsConfirm = ({\n  allComments,\n  postId\n}) => ({\n  type: types.FETCHED_ALL_COMMENTS_SUCCEEDED,\n  payload: {\n    allComments,\n    postId\n  },\n});\n\nexport const fetchAllCommentsDecline = ({\n  postId,\n  message,\n}) => ({\n  type: types.FETCHED_ALL_COMMENTS_FAILED,\n  payload: {\n    message,\n    postId,\n  },\n});\n\nexport const commentPost = ({\n  postId,\n  content,\n  randomId = uuidv4(),\n}) => ({\n  type: types.COMMENTED_POST,\n  payload: {\n    postId,\n    content,\n    randomId,\n  },\n});\n\nexport const commentPostConfirm = ({\n  id,\n  postId,\n  randomId,\n  content,\n  createdBy,\n  dateCreated,\n}) => ({\n  type: types.COMMENTED_POST_SUCCEEDED,\n  payload: {\n    id,\n    postId,\n    content,\n    randomId,\n    createdBy,\n    dateCreated,\n  },\n});\n\nexport const commentPostDecline = ({\n  postId,\n  randomId,\n  message,\n}) => ({\n  type: types.COMMENTED_POST_FAILED,\n  payload: {\n    postId,\n    randomId,\n    message,\n  },\n});\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport PostForm from '../PostForm'\nimport * as postActions from '../../../actions/post';\nimport * as selectors from '../../../reducers';\nimport styles from './post.module.css';\n\nexport const customPropTypes = {\n  content: PropTypes.string,\n  dateCreated: PropTypes.string,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    createdBy: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  createdBy: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }),\n  createComment: PropTypes.func.isRequired,\n  commentLoading: PropTypes.bool,\n  authId: PropTypes.number,\n  authName: PropTypes.string,\n  fetchComments: PropTypes.func.isRequired,\n  postId: PropTypes.number,\n  enableComments: PropTypes.bool.isRequired,\n  commentErrorMessage: PropTypes.string,\n}\n\nclass Post extends Component {\n\n  static propTypes = customPropTypes;\n\n  constructor(props){\n    super(props);\n    this.state = {\n      showComments: false,\n    }\n  }\n\n  loadComments(){\n    const {\n      fetchComments,\n      postId,\n    } = this.props;\n    fetchComments(postId);\n    this.setState({\n      showComments: true,\n    })\n  }\n\n  render(){\n    const {\n      content,\n      dateCreated,\n      comments,\n      createdBy,\n      createComment,\n      commentLoading,\n      authId,\n      authName,\n      enableComments,\n      commentErrorMessage,\n    } = this.props;\n    const {\n      showComments,\n    } = this.state;\n    return(\n      <div className={styles.post} data-test=\"postComponent\">\n        <Link to={`/profile/${createdBy ? createdBy.id : authId}`}> \n          <img\n            src=\"assets/defaultProfile.png\"\n            alt=\"profileImage\"\n          />\n        </Link>\n        <div className={styles.content}>\n          <p className={styles.text}>\n            {createdBy ? createdBy.name : authName}\n          </p>\n          <p className={styles.text}>\n            {content}\n          </p>\n          <p>\n            {createdBy ? dateCreated : \"Creating...\"}\n          </p>\n          <div className={styles.footer}>\n            {\n              !showComments && enableComments && createdBy && (\n                <button onClick={this.loadComments.bind(this)}>\n                  View Comments\n                </button>\n              )\n            }\n          </div>\n          {\n            showComments && (\n              <>\n                {\n                  commentErrorMessage && (\n                    <p>\n                      {commentErrorMessage}\n                    </p>\n                  )\n                }\n                {\n                  authId && (\n                    <PostForm onSubmit={createComment}/>\n                  )\n                }\n                {\n                 comments && comments.length ? (\n                    <div className={styles.bot}>\n                      {\n                        comments.map((comment) => (\n                          <Post\n                            key={comment.id}\n                            content={comment.content}\n                            dateCreated={comment.dateCreated}\n                            createdBy={comment.createdBy}\n                          />\n                        ))\n                      }\n                    </div>\n                  ) : (\n                    <>\n                      {\n                        !commentLoading && (\n                          <p>\n                            {authId ? \"be the first to comment\" : \"No comment to show\"}\n                          </p>\n\n                        )\n                      }\n                    </>\n                  )\n                }\n                {\n                  commentLoading && (\n                    <p className={styles.loading}>\n                      Loading...\n                    </p>\n                  )\n                }\n              </>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state, { postId }) => ({\n    commentLoading: selectors.getCommentLoading(state, postId),\n    commentErrorMessage: selectors.getCommentErrorMessage(state, postId),\n    comments: selectors.getAllCommentsByPost(state, postId),\n    authId: selectors.getAuthId(state),\n    authName: selectors.getAuthName(state),\n  }),\n  (dispatch, { postId }) => ({\n    fetchComments(postId){\n      dispatch(postActions.fetchAllComments({\n        postId,\n      }))\n    },\n    createComment(values){\n      dispatch(postActions.commentPost({\n        postId,\n        content: values.content,\n      }))\n    }\n  }),\n)(Post);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport PostForm from '../PostForm';\nimport Post from '../Post'\nimport * as postActions from '../../../actions/post';\nimport * as selectors from '../../../reducers';\nimport styles from './wall.module.css';\n\nexport const customPropTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    created_by: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  fetchPosts: PropTypes.func.isRequired,\n  enabledPost: PropTypes.bool,\n  createPost: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n  next: PropTypes.bool,\n  postErrors: PropTypes.string,\n}\n\n\nclass Wall extends Component {\n\n  static propTypes = customPropTypes;\n\n  componentDidMount(){\n    const {\n      fetchPosts\n    } = this.props;\n    fetchPosts({\n      clean: true,\n    });\n  }\n\n  render() {\n    const {\n      posts,\n      createPost,\n      enabledPost,\n      loading,\n      fetchPosts,\n      next,\n      postErrors,\n      wallErrors,\n    } = this.props\n    return (\n      <div className={styles.wall} data-test=\"wallComponent\">\n        {\n          !loading && wallErrors && (\n            <p className={styles.error}>\n              {wallErrors}\n            </p>\n          )\n        }\n        {\n          enabledPost && (\n            <PostForm data-test=\"postFormComponent\" onSubmit={createPost}/>\n          )\n        }\n        {\n          posts && posts.length && postErrors === undefined ? (\n            <>\n              {\n                posts.map((post) => (\n                  <Post\n                    key={post.id}\n                    postId={post.id}\n                    content={post.content}\n                    dateCreated={post.dateCreated}\n                    comments={post.comments}\n                    createdBy={post.createdBy}\n                    enableComments\n                  />\n                ))\n              }\n            </>\n          ) : (\n            <>\n              {\n                !loading && (\n                  <p data-test=\"postPlaceholderComponent\">\n                    {postErrors ? postErrors  : \"No posts to display\"}\n                  </p>\n                )\n              }\n            </>\n          )\n        }\n        {\n          loading ? (\n            <h3 className={styles.loading} data-test=\"postLoadingComponent\">\n              Loading...\n            </h3>\n          ) : (\n            <>\n              {\n                next && (\n                  <button className={styles.more} onClick={() => fetchPosts()}>\n                    more\n                  </button>\n                )\n              }\n            </>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n    postErrors: selectors.getPostErrors(state),\n    wallErrors: selectors.getWallErrors(state),\n    next: selectors.getIfNextPage(state),\n  }),\n  (dispatch) => ({\n    createPost(values){\n      dispatch(postActions.createPost({\n        content: values.content\n      }))\n    }\n  }),\n)(Wall);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Wall from '../General/Wall';\nimport { connect } from \"react-redux\";\nimport * as postActions from '../../actions/post';\nimport * as selectors from '../../reducers';\nimport styles from './main.module.css';\n\nexport const customPropTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    created_by: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  postLoading: PropTypes.bool,\n  authId: PropTypes.number,\n  fetchAllPost: PropTypes.func.isRequired,\n}\n\nclass Main extends Component {\n\n  static propTypes = customPropTypes;\n\n  render() {\n    const {\n      posts,\n      postLoading,\n      authId,\n      fetchAllPost,\n    } = this.props;\n    return(\n      <div\n        className={styles.main}\n        data-test=\"mainComponent\"\n      >\n        <Wall\n          fetchPosts={fetchAllPost}\n          posts={posts}\n          enabledPost={authId? true : false}\n          loading={postLoading}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default connect(\n  (state) => ({\n    postLoading: selectors.getPostLoading(state),\n    posts: selectors.getAllPosts(state),\n    authId: selectors.getAuthId(state),\n  }),\n  (dispatch) => ({\n    fetchAllPost(clean) {\n      dispatch(postActions.fetchAllPosts({\n        clean,\n      }));\n    },\n  }),\n)(Main);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from '../General/FormInput';\nimport * as selectors from '../../reducers';\nimport * as userActions from '../../actions/user';\nimport styles from './register.module.css';\n\nexport const customPropTypes = {\n  doRegister: PropTypes.func.isRequired,\n  stateErrors: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n    city: PropTypes.string,\n    gender: PropTypes.string,\n    password: PropTypes.string,\n    other: PropTypes.string,\n  }),\n  userLoading: PropTypes.bool.isRequired,\n}\n\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .max(40, 'Too Long')\n    .required('Required'),\n  name: Yup.string()\n    .min(2, 'Too Short')\n    .max(30, 'Too Long')\n    .required('Required'),\n  city: Yup.string()\n    .min(2, 'Too Short')\n    .max(30, 'Too Long')\n    .required('Required'),\n  gender: Yup.string()\n    .required('Required'),\n  password: Yup.string()\n    .min(2, 'Too Short')\n    .max(50, 'Too Long')\n    .required('Required'),\n  password2: Yup.string()\n    .required('Required'),\n});\n\nconst registerCamps = [\n  {\n    name: \"Email\",\n    id: \"email\",\n    placeholder: \"email\",\n  },\n  {\n    name: \"Name\",\n    id: \"name\",\n    placeholder: \"name\",\n  },\n  {\n    name: \"City\",\n    id: \"city\",\n    placeholder: \"city\",\n  },\n  {\n    name: \"Gender\",\n    id: \"gender\",\n    placeholder: \"gender\",\n    type: \"select\",\n    options: [\n      {\n        label: 'Female',\n        value: 'F',\n      },\n      {\n        label: 'Male',\n        value: 'M',\n      },\n    ],\n  },\n  {\n    name: \"Password\",\n    id: \"password\",\n    placeholder: \"password\",\n    type: \"password\",\n  },\n  {\n    name: \"Check Password\",\n    id: \"password2\",\n    placeholder: \"password\",\n    type: \"password\",\n  }\n]\n\nconst Register = ({\n  doRegister,\n  stateErrors,\n  userLoading,\n}) => (\n  <div\n    className={styles.register}\n    data-test=\"registerComponent\"\n  >\n    <Formik \n      initialValues={{\n        email: '',\n        name: '',\n        city: '',\n        genre: '',\n        password: '',\n        password2: '',\n      }}\n      validationSchema={SignupSchema}\n      validate={values => {\n        const errors = {};\n        if (values.password !== values.password2) {\n          errors.password2 = 'passwords do not match';\n        }\n        return errors;\n\n      }}\n      onSubmit={(values) => {\n        doRegister(values);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleSubmit,\n        handleBlur,\n      }) => (\n          <form onSubmit={handleSubmit} className={styles.form}>\n            <h1>\n              You are welcome!\n            </h1>\n            <h5>\n              we are happy to see you\n            </h5>\n            <div className={styles.camps}>\n              {\n                registerCamps.map((camp) => (\n                  <FormInput\n                    key={camp.id}\n                    bigStyles\n                    error={touched[camp.id] && (errors[camp.id] || (stateErrors && stateErrors[camp.id]))}\n                    handleBlur={handleBlur}\n                    label={camp.name}\n                    name={camp.id}\n                    onChange={handleChange}\n                    options={camp.options}\n                    placeholder={camp.name}\n                    type={camp.type}\n                    value={values[camp.id]}\n                  />\n                ))\n              }\n            </div>\n            <p>\n              &nbsp; \n              {\n                userLoading && \"Loading...\"\n              }\n              {\n                stateErrors && stateErrors.other \n              }\n            </p>\n            <button type=\"submit\">\n              Submit\n            </button>\n          </form>\n        )\n      }\n    </Formik>\n  </div>\n)\n\nRegister.propTypes = customPropTypes;\n\nexport default connect(\n  (state) => ({\n    stateErrors: selectors.getUserErrors(state),\n    userLoading: selectors.getUserLoading(state),\n  }),\n  (dispatch) => ({\n    doRegister(values) {\n      dispatch(userActions.registerUser({\n        email: values.email,\n        name: values.name,\n        city: values.city,\n        gender: values.gender,\n        password: values.password,\n      }))\n    }\n  }),\n)(Register)\n\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { compose } from 'redux'\nimport PropTypes from 'prop-types';\nimport {\n  withRouter,\n} from \"react-router-dom\";\nimport Wall from '../General/Wall';\nimport * as userActions from '../../actions/user';\nimport * as postActions from '../../actions/post';\nimport * as selectors from '../../reducers';\nimport styles from './profile.module.css';\n\nexport const customPropTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    dateCreated: PropTypes.string,\n    created_by: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    }),\n  })),\n  fetchAllPostForUser: PropTypes.func.isRequired,\n  postLoading: PropTypes.bool,\n  authId: PropTypes.number,\n  userErrors: PropTypes.shape({\n    other: PropTypes.string,\n  }),\n  userInformation: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n    city: PropTypes.string,\n    genre: PropTypes.string,\n    dateCreated: PropTypes.string,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      profileId: PropTypes.string,\n    })\n  })\n}\n\n\nclass Profile extends Component {\n\n  static propTypes = customPropTypes;\n\n  componentDidMount() {\n    const {\n      fetchProfileInfo,\n    } = this.props;\n    fetchProfileInfo();\n  }\n\n  render() {\n    const {\n      posts,\n      fetchAllPostForUser,\n      postLoading,\n      userErrors,\n      userInformation: {\n        email,\n        name,\n        city,\n        gender,\n        dateCreated,\n      },\n      authId,\n      match: {\n        params: {\n          profileId,\n        },\n      },\n    } = this.props;\n    return (\n      <div className={styles.profile} data-test=\"profileComponent\">\n        <div className={styles.information}>\n          <img\n            src=\"assets/defaultProfile.png\"\n            alt=\"profileImage\"\n            className={styles.profileImage}\n          />\n          {\n            userErrors && userErrors.other ? (\n              <p>\n                {userErrors.other}\n              </p>\n            ) : (\n              <>\n                {\n                  name && (\n                    <p>\n                      name: {name}\n                    </p>\n                  )\n                }\n                {\n                  email && (\n                    <p>\n                      email: {email}\n                    </p>\n                  )\n                }\n                {\n                  city && (\n                    <p>\n                      city: {city}\n                    </p>\n                  )\n                }\n                {\n                  gender && (\n                    <p>\n                      gender: {gender}\n                    </p>\n                  )\n                }\n                {\n                  dateCreated && (\n                    <p>\n                      date joined: {dateCreated}\n                    </p>\n                  )\n                }\n              </>\n            )\n          }\n        </div>\n        <Wall\n          fetchPosts={fetchAllPostForUser}\n          posts={posts}\n          enabledPost={authId === parseInt(profileId)}\n          loading={postLoading}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default compose(\n  withRouter,\n  connect(\n    (state) => ({\n      postLoading: selectors.getPostLoading(state),\n      posts: selectors.getAllPosts(state), \n      userInformation: selectors.getUserInformation(state),\n      userErrors: selectors.getUserErrors(state),\n      authId: selectors.getAuthId(state),\n    }),\n    (dispatch, {...props}) => ({\n      fetchAllPostForUser(clean) {\n        const {\n          match: {\n            params: {\n              profileId,\n            },\n          }\n        } = props;\n        dispatch(postActions.fetchAllPosts({\n          clean,\n          profileId,\n        }));\n      },\n      fetchProfileInfo() {\n        const {\n          match: {\n            params: {\n              profileId,\n            },\n          }\n        } = props;\n        dispatch(userActions.fetchProfileInfo({\n          profileId,\n        }));\n      },\n    }),\n  )\n)(Profile); \n","import React from 'react';\nimport {\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\nimport Header from '../Header';\nimport Main from '../Main';\nimport Register from '../Register';\nimport Profile from '../Profile';\nimport styles from './app.module.css';\n\nconst options = [\n  {\n    word: 'main',\n    path: '/main',\n    component: Main,\n  },\n  {\n    word: 'profile',\n    path: '/profile/:profileId',\n    component: Profile,\n  },\n  {\n    word: 'register',\n    path: '/register',\n    component: Register,\n  },\n];\n\nconst App = () => (\n  <div className={styles.app} data-test=\"dataComponent\">\n    <Header />\n    <Switch>\n      {\n        options.map((prop) => {\n          const View = prop.component;\n          return (\n            <Route\n              path={prop.path}\n              render={() => <View />}\n              key={prop.word}\n            />\n          );\n        })\n      }\n      <Redirect to=\"/main\" />\n    </Switch>\n  </div>\n);\n\nexport default App;\n","const URL = 'http://localhost:8000';\n//const URL = 'PRODUCTION URL';\n\nexport default URL;","import CURRENT_URL from './routes';\n\nexport const getProfileInfo = (\n  profileId,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/users/profile/${profileId}/`)\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const registerUser = (\n  email,\n  name,\n  city,\n  gender,\n  password,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/users/register/`, {\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      name,\n      city,\n      gender,\n      password,\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const doLogin = (\n  email,\n  password,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/users/login/`, {\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password,\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});","import {\n  put,\n  takeLatest,\n  call,\n} from 'redux-saga/effects';\nimport { forwardTo } from '../history';\nimport * as userTypes from '../types/user';\nimport * as userActions from '../actions/user';\nimport * as userApi from '../apis/user';\n\nexport function* profileFetcher(action) {\n  const {\n    payload: {\n      profileId,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      userApi.getProfileInfo,\n      profileId\n    );\n    if(!error){\n      yield put(userActions.fetchProfileInfoConfirm({\n        profileId: response.id,\n        email: response.email,\n        name: response.name,\n        city: response.city,\n        gender: response.gender,\n        dateCreated: response.date_created,\n      }));\n    } else {\n      yield put(userActions.fetchProfileInfoDecline({\n        message: {\n          other: response.detail,\n        }\n      }));\n      yield call(forwardTo, '/');\n    }\n    if (logout) {\n      // alert(\"Your session has expired\");\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(userActions.fetchProfileInfoDecline({\n      message: {\n        other:\"Something went wrong :(\"\n      },\n    }));\n  }\n}\n\nexport function* userRegister(action) {\n  const {\n    payload: {\n      email,\n      name,\n      city,\n      gender,\n      password,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      userApi.registerUser,\n      email,\n      name,\n      city,\n      gender,\n      password,\n    );\n    if(!error){\n      yield call(forwardTo, '/');\n      yield put(userActions.registerUserConfirm({\n        profileId: response.id,\n        email: response.email,\n        name: response.name,\n        city: response.city,\n        gender: response.gender,\n      }));\n    } else {\n      yield put(userActions.registerUserDecline({\n        message: response,\n      }));  \n    }\n    if (logout) {\n      // alert(\"Your session has expired\");\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(userActions.registerUserDecline({\n      message: {\n        other: \"Something went wrong :(\"\n      },\n    }));\n  }\n}\n\nexport function* userLogIn(action) {\n  const {\n    payload: {\n      email,\n      password,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      userApi.doLogin,\n      email,\n      password,\n    );\n    if(!error){\n      yield put(userActions.doLoginConfirm({\n        id: response.id,\n        token: response.token,\n        name: response.name,\n      }));\n    } else {\n      yield put(userActions.doLoginDecline({\n        message: {\n          email: response.error,\n        }\n      }));\n    }\n    if (logout) {\n      // alert(\"Your session has expired\");\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    console.log(error)\n    yield put(userActions.doLoginDecline({\n      message: {\n        email: \"Something went wrong :(\",\n      },\n    }));\n  }\n}\n\n\n\nfunction* LoginSaga() {\n  yield takeLatest(\n    userTypes.FETCHED_USER_PROFILE,\n    profileFetcher\n  );\n  yield takeLatest(\n    userTypes.USER_REGISTERED,\n    userRegister\n  );\n  yield takeLatest(\n    userTypes.USER_LOGED_IN,\n    userLogIn\n  );\n}\n\nexport default LoginSaga;\n","import CURRENT_URL from './routes';\n\nexport const getAllPosts = (\n  profileId,\n  limit,\n  offset,\n) => new Promise((resolve, reject) => {\n  const url = new URL(`${CURRENT_URL}/posts/`);\n  const params = {\n    created_by: profileId,\n    limit,\n    offset,\n  }\n  Object.keys(params).forEach(key => params[key] && url.searchParams.append(key, params[key]))\n  fetch(url).then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const getAllComments = (\n  postId,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/posts/${postId}/`)\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\n\nexport const createPost = (\n  token,\n  content,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/posts/`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      content\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});\n\nexport const createComment = (\n  token,\n  postId,\n  content,\n) => new Promise((resolve, reject) => {\n  fetch(`${CURRENT_URL}/posts/${postId}/`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      content\n    })\n  })\n  .then((resultado) =>  {\n    if (resultado.ok) {\n      resultado.json().then((res) => resolve({\n        response: res\n      }));\n    } else {\n      resultado.json().then((res) => resolve({\n        response: res,\n        error: true,\n        logout: resultado.status === 401,\n      }));\n    }\n  }).catch((error) => reject(error));\n});","import {\n  put,\n  takeLatest,\n  call,\n  select,\n} from 'redux-saga/effects';\nimport {\n  getUserToken,\n  getCurrentPage,\n  getPageSize,\n} from '../reducers';\nimport * as postTypes from '../types/post';\nimport * as postActions from '../actions/post';\nimport * as userActions from '../actions/user';\nimport * as postApi from '../apis/post';\n\nexport function* postFetcher(action) {\n  const {\n    payload: {\n      profileId,\n    },\n  } = action;\n  const currentPage = yield select(getCurrentPage);\n  const pageSize = yield select(getPageSize);\n  try {\n    const {\n      response,\n      error,\n      logout,\n    } = yield call(\n      postApi.getAllPosts,\n      profileId,\n      pageSize,\n      currentPage + 1,\n    );\n    if(!error) {\n      yield put(postActions.fetchAllPostsConfirm({\n        allPosts: response.results,\n        currentPage: currentPage + 1, \n        nextPage: response.next !== null ? true : false,\n      }));\n    } else {\n      yield put(postActions.fetchAllPostsDecline({\n        message: response && response.detail ? response.detail : \"Something went wrong :(\",\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.fetchAllPostsDecline({\n      message: \"Something went wrong :(\",\n    }));\n  }\n}\n\nexport function* commentsFetcher(action) {\n  const {\n    payload: {\n      postId,\n    },\n  } = action;\n  try {\n    const {\n      response,\n      error,\n      logout,\n     } = yield call(\n      postApi.getAllComments,\n      postId\n    );\n    if(!error){\n      yield put(postActions.fetchAllCommentsConfirm({\n        allComments: response,\n        postId,\n      }));\n    } else {\n      yield put(postActions.fetchAllCommentsDecline({\n        message: response && response.detail ? response.detail : \"Something went wrong :(\",\n        postId,\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.fetchAllCommentsDecline({\n      message: \"Something went wrong :(\",\n      postId,\n    }));\n  }\n}\n\nexport function* postCreator(action) {\n  const {\n    payload: {\n      content,\n      randomId,\n    },\n  } = action;\n  const token = yield select(getUserToken);\n  try {\n    const {\n      response,\n      error,\n      logout,\n     } = yield call(\n      postApi.createPost,\n      token,\n      content\n    );\n    if(!error) {\n      yield put(postActions.createPostConfirm({\n        id: response.id,\n        randomId,\n        content: response.content,\n        date_created: response.date_created,\n        createdBy: response.created_by,\n      })); \n    } else {\n      yield put(postActions.createPostDecline({\n        randomId,\n        message: response && response.detail ? response.detail : \"Something went wrong :(\",\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.createPostDecline({\n      randomId,\n      message: \"Something went wrong :(\",\n    }));\n  }\n}\n\nexport function* commentCreator(action) {\n  const {\n    payload: {\n      postId,\n      content,\n      randomId,\n    },\n  } = action;\n  const token = yield select(getUserToken);\n  try {\n    const {\n      response,\n      error,\n      logout,\n     } = yield call(\n      postApi.createComment,\n      token,\n      postId,\n      content\n    );\n    if(!error) {\n      yield put(postActions.commentPostConfirm({\n        postId,\n        id: response.id,\n        content: response.content,\n        dateCreated: response.date_created,\n        createdBy: response.created_by,\n        randomId,\n      }));\n    } else {\n      yield put(postActions.commentPostDecline({\n        message: response && response.detail ? response.detail : \"Something went wrong :(\",\n        postId,\n        randomId,\n      }));\n    }\n    if (logout) {\n      yield put(userActions.doLogout())\n    }\n  } catch (error) {\n    yield put(postActions.commentPostDecline({\n      message: \"Something went wrong :(\",\n      postId,\n      randomId,\n    }));\n  }\n}\n\nfunction* LoginSaga() {\n  yield takeLatest(\n    postTypes.FETCHED_ALL_POSTS,\n    postFetcher\n  );\n  yield takeLatest(\n    postTypes.FETCHED_ALL_COMMENTS,\n    commentsFetcher\n  );\n  yield takeLatest(\n    postTypes.CREATED_POST,\n    postCreator\n  );\n  yield takeLatest(\n    postTypes.COMMENTED_POST,\n    commentCreator\n  );\n}\n\nexport default LoginSaga;\n","import { fork, all } from 'redux-saga/effects';\nimport UserSaga from './user';\nimport PostSaga from './post';\n\nfunction* mainSaga() {\n  yield all([\n    fork(UserSaga),\n    fork(PostSaga),\n  ]);\n}\n\nexport default mainSaga;\n","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from './reducers';\nimport mainSaga from './sagas';\n\nexport const sagaMiddleware = createSagaMiddleware();\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: [\n    'authReducer',\n  ],\n};\n\nconst configureStore = () => {\n  const persistedReducer = persistReducer(persistConfig, reducer);\n  const store = createStore(\n    persistedReducer,\n    applyMiddleware(sagaMiddleware),\n  );\n  const persistor = persistStore(store);\n\n  sagaMiddleware.run(mainSaga);\n  return { store, persistor };\n};\n\n\nexport default configureStore;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router-dom';\nimport { history } from './history';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport configureStore from './configureStore';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst storeConfig = configureStore();\n\nReactDOM.render(\n    <Provider store={storeConfig.store}>\n      <PersistGate loading={null} persistor={storeConfig.persistor}>\n        <Router history={history}>\n          <App />\n        </Router>\n      </PersistGate>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__3dfXB\",\"content\":\"post_content__h2BkW\",\"footer\":\"post_footer__1K30M\",\"bot\":\"post_bot__3fWVl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__HZ6Fg\",\"logo\":\"header_logo__3iSgw\",\"greedings\":\"header_greedings__1YUq6\",\"login\":\"header_login__1zFFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wall\":\"wall_wall__1zXmL\",\"loading\":\"wall_loading__1G0Pv\",\"error\":\"wall_error__3g6Wq\",\"more\":\"wall_more__1gFhk\",\"form\":\"wall_form__1jCAV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"formInput_formInput__3UlXG\",\"big\":\"formInput_big__haJIS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"register_register__1d8O4\",\"form\":\"register_form__31fhn\",\"camps\":\"register_camps__P94z_\",\"errorMessage\":\"register_errorMessage__14tM_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__38jCY\",\"information\":\"profile_information__1SAyB\",\"profileImage\":\"profile_profileImage__3LwRO\",\"friends\":\"profile_friends__14eNu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"postForm_form__3-cWl\",\"formTextArea\":\"postForm_formTextArea__3GIrn\"};"],"sourceRoot":""}